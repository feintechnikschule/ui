{"version":3,"file":"ui.cjs.production.min.js","sources":["../src/@types/core.ts","../src/utils/error.ts","../src/engine/template.ts","../src/server/connection.ts","../src/utils/data.ts","../src/engine/dom.ts","../src/engine/compute.ts","../src/engine/compile.ts","../src/utils/lazy.ts","../src/core/directives/on.ts","../src/core/directives.ts","../src/engine/render.ts","../src/core/component.ts","../src/core/index.ts","../src/utils/reset.ts","../src/index.ts"],"sourcesContent":["export type Directives = Record<string, (props: DirectiveProps) => void>;\n\nexport interface DirectiveProps {\n    el: HTMLElement;\n    parts: string[];\n    data: DirectiveData;\n    node?: UINode;\n}\n\nexport type KeyedEvent = KeyboardEvent | MouseEvent | TouchEvent;\n\nexport interface DirectiveData {\n    compute: (event?: Event) => any;\n    value: string;\n}\n\nexport interface UINode {\n    directives: Record<string, DirectiveData>;\n    el: HTMLElement;\n    type: UINodeType;\n}\n\nexport enum UINodeType {\n    NULL = -1,\n    STATIC = 0,\n    DYNAMIC = 1\n}\n\nexport interface LeafUIConfig {\n    el: HTMLElement;\n    data: Record<string, any>;\n    methods: string[];\n    id: string;\n    path: string;\n    requestMethod: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD';\n    component: string;\n}\n","export const error = (\n    err: string,\n    expression?: string,\n    el?: HTMLElement\n): void => {\n    let message = `LeafUI Error: \"${err}\"`;\n    if (expression) message += `\\n\\nExpression: \"${expression}\"`;\n    if (el) message += `\\nElement:`;\n    console.warn(message, el);\n};\n","export default class template {\n    static findAll(el: HTMLElement): HTMLElement[] {\n        const elementsWithData = [];\n\n        for (let i = 0; i < el.children.length; i++) {\n            const child = el.children[i];\n            const html = child.innerHTML;\n\n            (child as HTMLElement).compile = () =>\n                template.compile(child as HTMLElement);\n\n            if (/{{\\s*\\$(\\w+)\\s*}}/g.test(html)) {\n                elementsWithData.push(child as HTMLElement);\n            }\n        }\n\n        return elementsWithData;\n    }\n\n    static compile(element: HTMLElement): HTMLElement {\n        const varsToUpdate = element.textContent!.matchAll(\n            /{{\\s*\\$(\\w+)\\s*}}/g\n        );\n\n        for (const varToUpdate of varsToUpdate) {\n            element.textContent = eval(\n                element.textContent!.replace(\n                    varToUpdate[0],\n                    window._leafUIConfig?.data?.[varToUpdate[1]] ?? ''\n                )\n            );\n        }\n\n        return element;\n    }\n\n    static compileString(str: string) {\n        const varsToUpdate = str.matchAll(/{{\\s*\\$(\\w+)\\s*}}/g);\n\n        for (const varToUpdate of varsToUpdate) {\n            str = str.replace(\n                varToUpdate[0],\n                window._leafUIConfig?.data?.[varToUpdate[1]] ?? ''\n            );\n        }\n\n        return eval(str);\n    }\n}\n","import Dom from './../engine/dom';\nimport template from './../engine/template';\nimport { error } from './../utils/error';\n\nexport default class Connection {\n    protected static headers: Record<string, string>;\n\n    public static connect(\n        type: string,\n        uiData: Record<string, any>,\n        dom: typeof Dom\n    ) {\n        const payload = {\n            type,\n            payload: {\n                params: [],\n                method: uiData.method,\n                methodArgs: template.compileString(uiData.methodArgs),\n                component: uiData.config.component,\n                data: uiData.config.data\n            }\n        };\n\n        return fetch(\n            `${window.location.href}?_leaf_ui_config=${JSON.stringify(\n                payload\n            )}`,\n            {\n                method: uiData.config.method,\n                // This enables \"cookies\".\n                credentials: 'same-origin',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Accept: 'text/html, application/xhtml+xml',\n                    'X-Leaf-UI': 'true',\n\n                    // set Custom Headers\n                    ...this.headers,\n\n                    // We'll set this explicitly to mitigate potential interference from ad-blockers/etc.\n                    Referer: window.location.href\n                }\n            }\n        ).then(async response => {\n            if (response.ok) {\n                response.text().then(response => {\n                    const data = JSON.parse(response);\n                    window._leafUIConfig.data = data.state;\n                    dom.diff(data.html, document.body!);\n                });\n            } else {\n                error(await response.text().then(res => res));\n            }\n        });\n    }\n\n    //    public sendMessage(message) {\n    //        // Forward the query string for the ajax requests.\n\n    //            .then(response => {\n    //                if (response.ok) {\n    //                    response.text().then(response => {\n    //                        if (this.isOutputFromDump(response)) {\n    //                            this.onError(message);\n    //                            this.showHtmlModal(response);\n    //                        } else {\n    //                            this.onMessage(\n    //                                message,\n    //                                JSON.parse(response)\n    //                            );\n    //                        }\n    //                    });\n    //                } else {\n    //                    if (\n    //                        this.onError(\n    //                            message,\n    //                            response.status,\n    //                            response\n    //                        ) === false\n    //                    )\n    //                        return;\n\n    //                    if (response.status === 419) {\n    //                        if (store.sessionHasExpired) return;\n\n    //                        store.sessionHasExpired = true;\n\n    //                        this.showExpiredMessage(\n    //                            response,\n    //                            message\n    //                        );\n    //                    } else {\n    //                        response.text().then(response => {\n    //                            this.showHtmlModal(response);\n    //                        });\n    //                    }\n    //                }\n    //            })\n    //            .catch(() => {\n    //                this.onError(message);\n    //            });\n    //    }\n}\n","import Component from './../core/component';\nimport { LeafUIConfig } from './../@types/core';\n\nexport const eventDirectivePrefixRE = (): RegExp => /on|@/gim;\nexport const rawDirectiveSplitRE = (): RegExp => /:|\\./gim;\n\nexport const hasDirectiveRE = (): RegExp => {\n    return new RegExp(\n        `(ui-|${Object.keys(DIRECTIVE_SHORTHANDS).join('|')})\\\\w+`,\n        'gim'\n    );\n};\n\nexport const expressionPropRE = (prop: string): RegExp => {\n    // Utilizes \\b (word boundary) for prop differentiation.\n    // Fails when next character is a \\w (Word).\n    return new RegExp(`\\\\b${prop}\\\\b`, 'gim');\n};\n\nexport enum DIRECTIVE_SHORTHANDS {\n    '@' = 'on',\n    ':' = 'bind'\n}\n\nexport function arraysMatch(a: any[], b: any[]) {\n    return (\n        Array.isArray(a) &&\n        Array.isArray(b) &&\n        a.length === b.length &&\n        a.every((val, index) => val === b[index])\n    );\n}\n\ndeclare global {\n    interface Window {\n        leafUI: Component;\n        _leafUIConfig: LeafUIConfig;\n    }\n\n    interface HTMLElement {\n        component: Component;\n        compile: () => void;\n    }\n}\n\nwindow.leafUI = window.leafUI || {};\n","import { initComponent } from './../core/component';\nimport { DIRECTIVE_SHORTHANDS, arraysMatch } from './../utils/data';\nimport template from './template';\n\nexport default class Dom {\n    static diff(newNode: string, oldNode: HTMLElement): void {\n        const newDomBody = Dom.getBodyWithoutScripts(newNode);\n        template.findAll(newDomBody).map(el => el.compile());\n        const diff = Dom.compareNodesAndReturnChanges(newDomBody, oldNode);\n\n        for (let i = 0; i < diff.length; i++) {\n            if (\n                diff[i] instanceof HTMLScriptElement ||\n                diff[i].oldNode.children.length !== 0\n            ) {\n                continue;\n            }\n\n            if (\n                arraysMatch(\n                    Object.keys(diff[i].oldNode.attributes),\n                    Object.keys(diff[i].newNode.attributes)\n                ) &&\n                arraysMatch(\n                    Object.values(diff[i].oldNode.attributes),\n                    Object.values(diff[i].newNode.attributes)\n                ) &&\n                diff[i].oldNode.innerHTML === diff[i].newNode.innerHTML\n            ) {\n                continue;\n            }\n\n            const hasDirectivePrefix = Object.values(diff[i].oldNode.attributes)\n                .map(attr => attr.name.startsWith('ui-'))\n                .includes(true);\n            const hasDirectiveShorthandPrefix = Object.keys(\n                DIRECTIVE_SHORTHANDS\n            ).some(shorthand =>\n                Object.values(diff[i].oldNode.attributes)\n                    .map(attr => attr.name.startsWith(shorthand))\n                    .includes(true)\n            );\n\n            if (hasDirectivePrefix || hasDirectiveShorthandPrefix) {\n                diff[i].oldNode.innerHTML = diff[i].newNode.innerHTML;\n\n                for (let j = 0; j < diff[i].newNode.attributes.length; j++) {\n                    const attr = diff[i].newNode.attributes[j];\n\n                    if (\n                        attr.name.startsWith('ui-') ||\n                        Object.keys(DIRECTIVE_SHORTHANDS).some(shorthand =>\n                            Object.values(diff[i].oldNode.attributes)\n                                .map(attr => attr.name.startsWith(shorthand))\n                                .includes(true)\n                        )\n                    ) {\n                        if (\n                            diff[i].oldNode.getAttribute(attr.name) !==\n                            attr.value\n                        ) {\n                            diff[i].oldNode.replaceWith(diff[i].newNode);\n                            initComponent(diff[i].newNode);\n                        }\n\n                        continue;\n                    }\n\n                    diff[i].oldNode.setAttribute(attr.name, attr.value);\n                }\n\n                continue;\n            }\n\n            diff[i].oldNode.replaceWith(diff[i].newNode);\n        }\n    }\n\n    static getBodyWithoutScripts(html: string): HTMLElement {\n        const parser = new DOMParser();\n        const dom = parser.parseFromString(html, 'text/html');\n        const scripts = dom.getElementsByTagName('script');\n\n        for (let i = 0; i < scripts.length; i++) {\n            scripts[i].remove();\n        }\n\n        return dom.body;\n    }\n\n    static flattenDomIntoArray(node: HTMLElement): HTMLCollection {\n        return node.getElementsByTagName('*');\n    }\n\n    static compareNodesAndReturnChanges(\n        newNode: HTMLElement,\n        oldNode: HTMLElement\n    ): Record<string, Element>[] {\n        const newNodes = Dom.flattenDomIntoArray(newNode);\n        const oldNodes = Dom.flattenDomIntoArray(oldNode);\n        const changes = [];\n\n        for (let i = 0; i < newNodes.length; i++) {\n            if (newNodes[i] !== oldNodes[i]) {\n                changes.push({\n                    oldNode: oldNodes[i],\n                    newNode: newNodes[i]\n                });\n            }\n        }\n\n        return changes;\n    }\n}\n","import { error } from '../utils/error';\nimport Connection from './../server/connection';\nimport Dom from './dom';\n\nexport const compute = (\n    expression: string,\n    el?: HTMLElement,\n    refs: Record<string, HTMLElement> = {}\n): ((event?: Event) => any) => {\n    const specialPropertiesNames = ['$el', '$emit', '$event', '$refs', '$dom'];\n\n    // This \"revives\" a function from a string, only using the new Function syntax once during compilation.\n    // This is because raw function is ~50,000x faster than new Function\n    const computeFunction = new Function(\n        `return (${specialPropertiesNames.join(',')}) => {\n            const method = ${JSON.stringify(expression)}.split('(')[0];\n            const methodArgs = ${JSON.stringify(expression)}.substring(${JSON.stringify(expression)}.indexOf('(') + 1, ${JSON.stringify(expression)}.lastIndexOf(')'));\n\n            if (!window._leafUIConfig.methods.includes(method)) {\n                return error(new ReferenceError(method + ' is not defined'), method, $el);\n            }\n\n            (${\n                Connection.connect\n            })('callMethod', { method, methodArgs, config: window._leafUIConfig }, $dom);\n        }`\n    )();\n\n    const emit = (\n        name: string,\n        options?: CustomEventInit,\n        dispatchGlobal = true\n    ) => {\n        const event = new CustomEvent(name, options);\n        const target = dispatchGlobal ? window : el || window;\n\n        target.dispatchEvent(event);\n    };\n\n    return (event?: Event) => {\n        try {\n            return computeFunction(el, emit, event, refs, Dom);\n        } catch (err) {\n            error(err as string, expression, el);\n        }\n    };\n};\n","import { DirectiveData, UINode, UINodeType } from '../@types/core';\nimport { compute } from './compute';\nimport { DIRECTIVE_SHORTHANDS } from '../utils/data';\n\nexport const flattenElementChildren = (\n    rootElement: HTMLElement,\n    ignoreRootElement = false\n): HTMLElement[] => {\n    const collection: HTMLElement[] = [];\n\n    if (!ignoreRootElement) {\n        collection.push(rootElement);\n    }\n\n    for (const childElement of rootElement.children as any) {\n        if (childElement instanceof HTMLElement) {\n            collection.push(\n                ...flattenElementChildren(\n                    childElement,\n                    childElement.attributes.length === 0\n                )\n            );\n        }\n    }\n\n    return collection;\n};\n\nexport const collectRefs = (\n    element: HTMLElement | Document = document\n): Record<string, HTMLElement> => {\n    const refDirective = 'ui-ref';\n    const refElements: NodeListOf<HTMLElement> = element.querySelectorAll(\n        `[${refDirective}]`\n    );\n    const refs: Record<string, HTMLElement> = {};\n\n    refElements.forEach(refElement => {\n        const name = refElement.getAttribute(refDirective);\n\n        if (name) {\n            refs[name] = refElement;\n        }\n    });\n\n    return refs;\n};\n\nexport const initDirectives = (\n    el: HTMLElement\n): Record<string, DirectiveData> => {\n    const directives: Record<string, DirectiveData> = {};\n    const refs = collectRefs();\n\n    // @ts-ignore\n    for (const { name, value } of el.attributes) {\n        const hasDirectivePrefix = name.startsWith('ui-');\n        const hasDirectiveShorthandPrefix = Object.keys(\n            DIRECTIVE_SHORTHANDS\n        ).some(shorthand => name.startsWith(shorthand));\n\n        if (!(hasDirectivePrefix || hasDirectiveShorthandPrefix)) {\n            continue;\n        }\n\n        const directiveData = {\n            compute: compute(value, el, refs),\n            value\n        };\n\n        // Handle normal and shorthand directives=\n        const directiveName = hasDirectivePrefix\n            ? name.slice('ui-'.length)\n            : // @ts-ignore\n              `${DIRECTIVE_SHORTHANDS[name[0]]}:${name.slice(1)}`;\n\n        directives[directiveName.toLowerCase()] = directiveData;\n    }\n\n    return directives;\n};\n\nexport const createASTNode = (el: HTMLElement): UINode | undefined => {\n    const directives = initDirectives(el);\n    const hasDirectives = Object.keys(directives).length > 0;\n    const node = { el, directives, type: UINodeType.STATIC };\n\n    return hasDirectives ? node : undefined;\n};\n\nexport const compile = (\n    el: HTMLElement,\n    ignoreRootElement = false\n): UINode[] => {\n    const uiNodes: UINode[] = [];\n    const elements = flattenElementChildren(el, ignoreRootElement);\n\n    elements.forEach(element => {\n        const newASTNode = createASTNode(element);\n\n        if (newASTNode) {\n            uiNodes.push(newASTNode);\n        }\n    });\n\n    return uiNodes;\n};\n","/**\n * @author Aiden Bai <hello@aidenybai.com>\n * @package lucia\n */\n// Lazy allows us to delay render calls if the main thread is blocked\n// This is kind of like time slicing in React but less advanced\n// It's a generator function that yields after a certain amount of time\n// This allows the browser to render other things while the generator is running\n// It's a bit like a setTimeout but it's more accurate\n\nexport const lazy = (\n  threshold: number,\n  generatorFunction: () => Generator<undefined, void, unknown>,\n): (() => void) => {\n  const generator = generatorFunction();\n  return function next() {\n    const start = performance.now();\n    let task = null;\n    do {\n      task = generator.next();\n    } while (performance.now() - start < threshold && !task.done);\n\n    if (task.done) return;\n    setTimeout(next);\n  };\n};\n\nexport default lazy;\n","import { DirectiveProps, KeyedEvent } from './../../@types/core';\n\nexport const onDirective = ({ el, parts, data }: DirectiveProps): void => {\n    const options: Record<string, boolean> = {};\n    const globalScopeEventProps = ['outside', 'global'];\n    const eventProps = parts.slice(2);\n    const EVENT_REGISTERED_FLAG = `__on_${parts[1]}_registered`;\n\n    // @ts-expect-error: We're adding a custom property to the element\n    if (el[EVENT_REGISTERED_FLAG]) return;\n\n    const target = globalScopeEventProps.some(prop =>\n        String(eventProps).includes(prop)\n    )\n        ? window\n        : el;\n\n    const handler = (event: Event) => {        \n        if (eventProps.length > 0) {\n            if (\n                event instanceof KeyboardEvent &&\n                /\\d/gim.test(String(eventProps))\n            ) {\n                const whitelistedKeycodes: number[] = [];\n                eventProps.forEach(eventProp => {\n                    // @ts-expect-error: eventProp can be a string, but isNaN only accepts number\n                    if (!isNaN(eventProp)) {\n                        whitelistedKeycodes.push(Number(eventProp));\n                    }\n                });\n\n                if (!whitelistedKeycodes.includes(event.keyCode)) return;\n            }\n\n            // Parse event modifiers based on directive prop\n            if (eventProps.includes('prevent')) event.preventDefault();\n            if (eventProps.includes('stop')) event.stopPropagation();\n            if (eventProps.includes('self')) {\n                if (event.target !== el) return;\n            }\n            /* istanbul ignore next */\n            if (eventProps.includes('outside')) {\n                if (el.contains(event.target as Node)) return;\n                if (el.offsetWidth < 1 && el.offsetHeight < 1) return;\n            }\n\n            if (eventProps.includes('enter') || eventProps.includes('meta')) {\n                if ((event as KeyboardEvent).key === 'Enter') {\n                    data.compute(event);\n                }\n            }\n\n            if (\n                (eventProps.includes('ctrl') &&\n                    (event as KeyedEvent).ctrlKey) ||\n                (eventProps.includes('alt') && (event as KeyedEvent).altKey) ||\n                (eventProps.includes('shift') &&\n                    (event as KeyedEvent).shiftKey) ||\n                (eventProps.includes('left') &&\n                    'button' in event &&\n                    (event as MouseEvent).button === 0) ||\n                (eventProps.includes('middle') &&\n                    'button' in event &&\n                    (event as MouseEvent).button === 1) ||\n                (eventProps.includes('right') &&\n                    'button' in event &&\n                    (event as MouseEvent).button === 2)\n            ) {\n                data.compute(event);\n            }\n        } else {\n            data.compute(event);\n        }\n    };\n\n    options.once = eventProps.includes('once');\n    options.passive = eventProps.includes('passive');\n\n    target.addEventListener(parts[1], handler, options);\n\n    // @ts-expect-error: We're adding a custom property to the element\n    el[EVENT_REGISTERED_FLAG] = true;\n};\n","import { DirectiveProps, Directives } from './../@types/core';\n// import { bindDirective } from './directives/bind';\n// import { modelDirective } from './directives/model';\nimport { onDirective } from './directives/on';\n\nexport const directives: Directives = {\n    // BIND: bindDirective,\n    // MODEL: modelDirective,\n    ON: onDirective,\n};\n\nexport const renderDirective = (\n    props: DirectiveProps,\n    directives: Directives\n): void => {\n    directives[props.parts[0].toUpperCase()](props);\n};\n","import lazy from './../utils/lazy';\nimport { renderDirective } from './../core/directives';\nimport { rawDirectiveSplitRE } from './../utils/data';\nimport { Directives, UINode, UINodeType } from './../@types/core';\n\nconst render = (\n    uiNodes: UINode[],\n    directives: Directives,\n): void => {\n    const legalDirectiveNames = Object.keys(directives);\n    const LAZY_MODE_TIMEOUT = 25;\n\n    lazy(LAZY_MODE_TIMEOUT, function*() {\n        for (const node of uiNodes) {\n            if (node.type === UINodeType.NULL) continue;\n            const isStatic = node.type === UINodeType.STATIC;\n            if (isStatic) node.type = UINodeType.NULL;\n            yield;\n\n            if (!isStatic) continue;\n\n            for (const [directiveName, directiveData] of Object.entries(\n                node.directives\n            )) {\n                const rawDirectiveName = directiveName.split(\n                    rawDirectiveSplitRE()\n                )[0];\n\n                if (\n                    !legalDirectiveNames.includes(\n                        rawDirectiveName.toUpperCase()\n                    )\n                )\n                    continue;\n                yield;\n\n                // If affected, then push to render queue\n                if (isStatic) {\n                    const directiveProps = {\n                        el: node.el,\n                        parts: directiveName.split(rawDirectiveSplitRE()),\n                        data: directiveData,\n                        node,\n                    };\n\n                    renderDirective(directiveProps, directives);\n\n                    // [TODO] Remove this after testing\n                    delete node.directives[directiveName];\n                }\n            }\n        }\n    })();\n};\n\nexport default render;\n","import { UINode } from './../@types/core';\nimport { compile } from '../engine/compile';\nimport render from '../engine/render';\nimport { directives } from './directives';\nimport template from './../engine/template';\n\nexport default class Component {\n    public uiNodes: UINode[] = [];\n\n    constructor() {\n        this.uiNodes = [];\n    }\n\n    public mount(el: HTMLElement | string) {\n        const rootEl =\n            el instanceof HTMLElement\n                ? el\n                : document.querySelector<HTMLElement>(el) || document.body;\n\n        template.findAll(rootEl).map(el => el.compile());\n        this.uiNodes = compile(rootEl);\n\n        this.render();\n\n        rootEl['component'] = this;\n\n        return this;\n    }\n\n    /**\n     * Force renders the DOM based on props\n     * @param {string[]=} props - Array of root level properties in state\n     * @returns {undefined}\n     */\n    public render() {\n        render(this.uiNodes, directives);\n    }\n}\n\nexport const initComponent = (element: Element) =>\n    new Component().mount(element as HTMLElement);\n","import Component from './component';\n\n/**\n * Initialize Your Leaf UI root component\n * @param {HTMLElement|Document} element - Root element to find uninitialized components\n */\nexport const init = (element: HTMLElement | Document = document): void => {\n    const leafUI = new Component();\n    const rootElement = element instanceof Document ? element.body : element;\n\n    leafUI.mount(rootElement);\n};\n","/**\n * @author Caleb Porzio\n * @package livewire/livewire\n */\nexport function monkeyPatchDomSetAttributeToAllowAtSymbols() {\n    // Because morphdom may add attributes to elements containing \"@\" symbols\n    // like in the case of an Alpine `@click` directive, we have to patch\n    // the standard Element.setAttribute method to allow this to work.\n    let original = Element.prototype.setAttribute;\n\n    let hostDiv = document.createElement('div');\n\n    Element.prototype.setAttribute = function newSetAttribute(name, value) {\n        if (!name.includes('@')) {\n            return original.call(this, name, value);\n        }\n\n        hostDiv.innerHTML = `<span ${name}=\"${value}\"></span>`;\n\n        let attr = (hostDiv.firstElementChild)!.getAttributeNode(name)!;\n\n        (hostDiv.firstElementChild)!.removeAttributeNode(attr);\n\n        this.setAttributeNode(attr);\n    };\n}\n","import { init } from './core';\nimport { monkeyPatchDomSetAttributeToAllowAtSymbols } from './utils/reset';\nexport * from './@types';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    monkeyPatchDomSetAttributeToAllowAtSymbols();\n    init();\n\n    document.querySelectorAll('[ui-lazy]').forEach(el => {\n        el.removeAttribute('ui-lazy');\n    });\n});\n"],"names":["UINodeType","error","err","expression","el","message","console","warn","template","findAll","elementsWithData","child","children","i","html","innerHTML","compile","test","push","length","_loop","element","varsToUpdate","textContent","matchAll","varToUpdate","eval","replace","window","_leafUIConfig","_window$_leafUIConfig2","data","_window$_leafUIConfig3","compileString","str","_window$_leafUIConfig5","_window$_leafUIConfig6","Connection","connect","type","uiData","dom","payload","params","method","methodArgs","component","config","fetch","location","href","JSON","stringify","credentials","headers","Content-Type","Accept","X-Leaf-UI","this","Referer","then","response","ok","_context","text","parse","state","diff","document","body","res","rawDirectiveSplitRE","DIRECTIVE_SHORTHANDS","arraysMatch","a","b","Array","isArray","every","val","index","leafUI","Dom","newNode","oldNode","newDomBody","getBodyWithoutScripts","map","compareNodesAndReturnChanges","HTMLScriptElement","Object","keys","attributes","values","hasDirectivePrefix","attr","name","startsWith","includes","hasDirectiveShorthandPrefix","some","shorthand","j","getAttribute","value","replaceWith","initComponent","setAttribute","DOMParser","parseFromString","scripts","getElementsByTagName","remove","flattenDomIntoArray","node","newNodes","oldNodes","changes","compute","refs","computeFunction","Function","join","emit","options","dispatchGlobal","event","CustomEvent","dispatchEvent","flattenElementChildren","rootElement","ignoreRootElement","collection","childElement","HTMLElement","collectRefs","refElements","querySelectorAll","forEach","refElement","initDirectives","directives","directiveData","directiveName","slice","toLowerCase","createASTNode","STATIC","undefined","uiNodes","newASTNode","lazy","threshold","generatorFunction","generator","next","start","performance","now","task","done","setTimeout","onDirective","parts","eventProps","EVENT_REGISTERED_FLAG","target","prop","String","once","passive","addEventListener","KeyboardEvent","whitelistedKeycodes","eventProp","isNaN","Number","keyCode","preventDefault","stopPropagation","contains","offsetWidth","offsetHeight","key","ctrlKey","altKey","shiftKey","button","ON","renderDirective","props","toUpperCase","render","legalDirectiveNames","_iterator","NULL","isStatic","_i","entries","_Object$entries$_i","rawDirectiveName","split","directiveProps","Component","_proto","mount","rootEl","querySelector","init","Document","monkeyPatchDomSetAttributeToAllowAtSymbols","original","Element","prototype","hostDiv","createElement","call","firstElementChild","getAttributeNode","removeAttributeNode","setAttributeNode","removeAttribute"],"mappings":"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"}