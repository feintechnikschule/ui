{"version":3,"file":"ui.cjs.production.min.js","sources":["../src/@types/core.ts","../src/utils/error.ts","../src/utils/data.ts","../src/server/connection.ts","../src/engine/dom.ts","../src/engine/compute.ts","../src/core/directives.ts","../src/core/directives/on.ts","../src/core/component.ts","../src/engine/compile.ts","../src/engine/render.ts","../src/utils/lazy.ts","../src/index.ts","../src/utils/reset.ts","../src/core/index.ts"],"sourcesContent":["export type Directives = Record<string, (props: DirectiveProps) => void>;\n\nexport interface DirectiveProps {\n    el: HTMLElement;\n    parts: string[];\n    data: DirectiveData;\n    node?: UINode;\n}\n\nexport type KeyedEvent = KeyboardEvent | MouseEvent | TouchEvent;\n\nexport interface DirectiveData {\n    compute: (event?: Event) => any;\n    value: string;\n}\n\nexport interface UINode {\n    directives: Record<string, DirectiveData>;\n    el: HTMLElement;\n    type: UINodeType;\n}\n\nexport enum UINodeType {\n    NULL = -1,\n    STATIC = 0,\n    DYNAMIC = 1\n}\n\nexport interface LeafUIConfig {\n    el: HTMLElement;\n    data: Record<string, any>;\n    methods: string[];\n    id: string;\n    path: string;\n    requestMethod: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD';\n    component: string;\n}\n","export const error = (\n    err: string,\n    expression?: string,\n    el?: HTMLElement\n): void => {\n    let message = `LeafUI Error: \"${err}\"`;\n    if (expression) message += `\\n\\nExpression: \"${expression}\"`;\n    if (el) message += `\\nElement:`;\n    console.warn(message, el);\n};\n","import Component from './../core/component';\nimport { LeafUIConfig } from './../@types/core';\n\nexport const eventDirectivePrefixRE = (): RegExp => /on|@/gim;\nexport const rawDirectiveSplitRE = (): RegExp => /:|\\./gim;\n\nexport const hasDirectiveRE = (): RegExp => {\n    return new RegExp(\n        `(ui-|${Object.keys(DIRECTIVE_SHORTHANDS).join('|')})\\\\w+`,\n        'gim'\n    );\n};\n\nexport const expressionPropRE = (prop: string): RegExp => {\n    // Utilizes \\b (word boundary) for prop differentiation.\n    // Fails when next character is a \\w (Word).\n    return new RegExp(`\\\\b${prop}\\\\b`, 'gim');\n};\n\nexport enum DIRECTIVE_SHORTHANDS {\n    '@' = 'on',\n    ':' = 'bind'\n}\n\nexport function arraysMatch(a: any[], b: any[]) {\n    return (\n        Array.isArray(a) &&\n        Array.isArray(b) &&\n        a.length === b.length &&\n        a.every((val, index) => val === b[index])\n    );\n}\n\ndeclare global {\n    interface Window {\n        leafUI: {\n            rootEl?: HTMLElement;\n            component: Component;\n        };\n        _leafUIConfig: LeafUIConfig;\n    }\n\n    interface HTMLElement {\n        component: Component;\n        compile: () => void;\n    }\n}\n\nwindow.leafUI = window.leafUI || {};\n","import Dom from './../engine/dom';\nimport { error } from './../utils/error';\n\nexport default class Connection {\n    protected static headers: Record<string, string>;\n\n    public static connect(\n        type: string,\n        uiData: Record<string, any>,\n        dom: typeof Dom\n    ) {\n        const pageState: Record<string, any> = {};\n        const component: HTMLElement = uiData.element.closest('[ui-state]');\n        const componentData = JSON.parse(component?.getAttribute('ui-state') ?? '{}');\n        const components = document.querySelectorAll('[ui-state]');\n\n        components.forEach((i) => {\n            const attr = JSON.parse(i.getAttribute('ui-state') ?? '{}');\n            pageState[attr.key] = attr;\n        });\n\n        const payload = {\n            type,\n            payload: {\n                params: [],\n                method: uiData.method,\n                methodArgs: uiData.methodArgs,\n                component: componentData?.key,\n                data: pageState,\n            }\n        };\n\n        return fetch(\n            `${window.location.href}?_leaf_ui_config=${JSON.stringify(\n                payload\n            )}`,\n            {\n                method: uiData.config.method,\n                // This enables \"cookies\".\n                credentials: 'same-origin',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Accept: 'text/html, application/xhtml+xml',\n                    'X-Leaf-UI': 'true',\n\n                    // set Custom Headers\n                    ...this.headers,\n\n                    // We'll set this explicitly to mitigate potential interference from ad-blockers/etc.\n                    Referer: window.location.href\n                }\n            }\n        ).then(async response => {\n            if (response.ok) {\n                response.text().then(response => {\n                    const data = JSON.parse(response);\n                    window._leafUIConfig.data = data.state;\n                    dom.diff(\n                        data.html,\n                        component.nodeName === 'HTML' || !component\n                            ? document.body!\n                            : component\n                    );\n                });\n            } else {\n                error(await response.text().then(res => res));\n            }\n        });\n    }\n}\n","import { initComponent } from './../core/component';\nimport { arraysMatch } from './../utils/data';\n\nexport default class Dom {\n    /**\n     * Get the body of an HTML string\n     *\n     * @param html The html to parse\n     * @param removeScripts Whether to remove scripts from the html\n     * @returns The body of the html\n     */\n    public static getBody(\n        html: string,\n        removeScripts: boolean = false\n    ): HTMLElement {\n        const parser = new DOMParser();\n        const dom = parser.parseFromString(html, 'text/html');\n\n        if (removeScripts === true) {\n            const scripts = dom.body.getElementsByTagName('script');\n\n            for (let i = 0; i < scripts.length; i++) {\n                scripts[i].remove();\n            }\n        }\n\n        return dom.body;\n    }\n\n    /**\n     * Wrap DOM node with a template element\n     */\n    public static wrap(node: Node): HTMLElement {\n        const wrapper = document.createElement('x-leafui-wrapper');\n        wrapper.appendChild(node);\n        return wrapper;\n    }\n\n    /**\n     * Parse string to DOM\n     *\n     * @param html The html to parse\n     */\n    public static parse(html: string): HTMLElement {\n        const parser = new DOMParser();\n        const dom = parser.parseFromString(html, 'text/html');\n\n        return dom.getRootNode().firstChild as HTMLElement;\n    }\n\n    /**\n     * Get the type for a node\n     * @param  {HTMLElement} node The node\n     * @return {String} The type\n     */\n    public static getNodeType(node: HTMLElement): string {\n        if (node.nodeType === 3) return 'text';\n        if (node.nodeType === 8) return 'comment';\n        return node.tagName.toLowerCase();\n    }\n\n    /**\n     * Get the content from a node\n     * @param  {Node}   node The node\n     * @return {String}      The type\n     */\n    public static getNodeContent(node: HTMLElement) {\n        if (node.children && node.children.length > 0) return null;\n        return node.textContent;\n    }\n\n    /**\n     * Diff the DOM from a string and an element\n     *\n     * @param newNode The new node\n     * @param oldNode The old node\n     * @returns The diffed node\n     */\n    public static diff(newNode: string, oldNode: HTMLElement): void {\n        const structuredNewNode =\n            oldNode.nodeName === 'BODY'\n                ? Dom.getBody(newNode, false)\n                : Dom.getBody(newNode, true).children[0];\n        const structuredOldNode = oldNode;\n\n        Dom.diffElements(structuredNewNode as HTMLElement, structuredOldNode);\n    }\n\n    /**\n     * Diff the DOM from two elements\n     *\n     * @param newNode The new node\n     * @param oldNode The old node\n     * @returns The diffed node\n     */\n    public static diffElements(\n        newNode: HTMLElement,\n        oldNode: HTMLElement\n    ): void {\n        const newNodes = Array.prototype.slice.call(newNode.children);\n        const oldNodes = Array.prototype.slice.call(oldNode.children);\n\n        let count = oldNodes.length - newNodes.length;\n\n        if (count > 0) {\n            for (; count > 0; count--) {\n                oldNodes[oldNodes.length - count].parentNode.removeChild(\n                    oldNodes[oldNodes.length - count]\n                );\n            }\n        }\n\n        for (let index = 0; index < newNodes.length; index++) {\n            const node = newNodes[index];\n\n            if (!oldNodes[index]) {\n                const newNodeClone = node.cloneNode(true);\n                oldNode.appendChild(newNodeClone);\n                initComponent(newNodeClone);\n                continue;\n            }\n\n            if (\n                node instanceof HTMLScriptElement &&\n                oldNodes[index] instanceof HTMLScriptElement\n            ) {\n                if (\n                    node.src !== oldNodes[index].src ||\n                    node.innerHTML !== oldNodes[index].innerHTML\n                ) {\n                    const newNodeClone = node.cloneNode(true);\n                    oldNodes[index].parentNode.replaceChild(\n                        newNodeClone,\n                        oldNodes[index]\n                    );\n                }\n\n                continue;\n            }\n\n            if (\n                !arraysMatch(\n                    Object.values(node.parentNode?.attributes ?? {}),\n                    Object.values(oldNodes[index].parentNode?.attributes ?? {})\n                )\n            ) {\n                for (\n                    let nIndex = 0;\n                    nIndex < node.parentNode.attributes?.length;\n                    nIndex++\n                ) {\n                    const attribute = node.parentNode.attributes[nIndex];\n                    oldNodes[index]?.parentNode?.setAttribute(\n                        attribute.name,\n                        attribute.value\n                    );\n                }\n            }\n\n            if (\n                Dom.getNodeType(node) !== Dom.getNodeType(oldNodes[index]) ||\n                !arraysMatch(\n                    Object.keys(oldNodes[index]?.attributes) ?? [],\n                    Object.keys(node.attributes)\n                ) ||\n                oldNodes[index]?.innerHTML !== node.innerHTML\n            ) {\n                const newNodeClone = node.cloneNode(true);\n\n                if (!oldNodes[index].parentNode) {\n                    oldNodes[index].replaceWith(newNodeClone);\n                    initComponent(newNodeClone);\n                } else {\n                    oldNodes[index].parentNode.replaceChild(\n                        newNodeClone,\n                        oldNodes[index]\n                    );\n                    initComponent(newNodeClone);\n                }\n\n                continue;\n            }\n\n            // If content is different, update it\n            const templateContent = Dom.getNodeContent(node);\n            if (\n                templateContent &&\n                templateContent !== Dom.getNodeContent(oldNodes[index])\n            ) {\n                oldNodes[index].textContent = templateContent;\n            }\n\n            if (\n                oldNodes[index].children.length > 0 &&\n                node.children.length < 1\n            ) {\n                oldNodes[index].innerHTML = '';\n                continue;\n            }\n\n            if (\n                oldNodes[index].children.length < 1 &&\n                node.children.length > 0\n            ) {\n                const fragment = document.createDocumentFragment();\n                Dom.diffElements(node, fragment as any);\n                oldNodes[index].appendChild(fragment);\n                continue;\n            }\n\n            if (node.children.length > 0) {\n                Dom.diffElements(node, oldNodes[index]);\n            }\n        }\n    }\n}\n","import { error } from '../utils/error';\nimport Connection from './../server/connection';\nimport Dom from './dom';\n\nexport const compute = (\n    expression: string,\n    el?: HTMLElement,\n    refs: Record<string, HTMLElement> = {}\n): ((event?: Event) => any) => {\n    const specialPropertiesNames = ['$el', '$emit', '$event', '$refs', '$dom'];\n\n    // This \"revives\" a function from a string, only using the new Function syntax once during compilation.\n    // This is because raw function is ~50,000x faster than new Function\n    const computeFunction = new Function(\n        `return (${specialPropertiesNames.join(',')}) => {\n            const method = ${JSON.stringify(expression)}.split('(')[0];\n            const methodArgs = ${JSON.stringify(expression)}.substring(${JSON.stringify(expression)}.indexOf('(') + 1, ${JSON.stringify(expression)}.lastIndexOf(')'));\n\n            if (!window._leafUIConfig.methods.includes(method)) {\n                return error(new ReferenceError(method + ' is not defined'), method, $el);\n            }\n\n            (${\n                Connection.connect\n            })('callMethod', { element: $el, method, methodArgs, config: window._leafUIConfig }, $dom);\n        }`\n    )();\n\n    const emit = (\n        name: string,\n        options?: CustomEventInit,\n        dispatchGlobal = true\n    ) => {\n        const event = new CustomEvent(name, options);\n        const target = dispatchGlobal ? window : el || window;\n\n        target.dispatchEvent(event);\n    };\n\n    return (event?: Event) => {\n        try {\n            return computeFunction(el, emit, event, refs, Dom);\n        } catch (err) {\n            error(err as string, expression, el);\n        }\n    };\n};\n","import { DirectiveProps, Directives } from './../@types/core';\n// import { bindDirective } from './directives/bind';\n// import { modelDirective } from './directives/model';\nimport { onDirective } from './directives/on';\n\nexport const directives: Directives = {\n    // BIND: bindDirective,\n    // MODEL: modelDirective,\n    ON: onDirective,\n};\n\nexport const renderDirective = (\n    props: DirectiveProps,\n    directives: Directives\n): void => {\n    directives[props.parts[0].toUpperCase()](props);\n};\n","import { DirectiveProps, KeyedEvent } from './../../@types/core';\n\nexport const onDirective = ({ el, parts, data }: DirectiveProps): void => {\n    const options: Record<string, boolean> = {};\n    const globalScopeEventProps = ['outside', 'global'];\n    const eventProps = parts.slice(2);\n    const EVENT_REGISTERED_FLAG = `__on_${parts[1]}_registered`;\n\n    // @ts-expect-error: We're adding a custom property to the element\n    if (el[EVENT_REGISTERED_FLAG]) return;\n\n    const target = globalScopeEventProps.some(prop =>\n        String(eventProps).includes(prop)\n    )\n        ? window\n        : el;\n\n    const handler = (event: Event) => {        \n        if (eventProps.length > 0) {\n            if (\n                event instanceof KeyboardEvent &&\n                /\\d/gim.test(String(eventProps))\n            ) {\n                const whitelistedKeycodes: number[] = [];\n                eventProps.forEach(eventProp => {\n                    // @ts-expect-error: eventProp can be a string, but isNaN only accepts number\n                    if (!isNaN(eventProp)) {\n                        whitelistedKeycodes.push(Number(eventProp));\n                    }\n                });\n\n                if (!whitelistedKeycodes.includes(event.keyCode)) return;\n            }\n\n            // Parse event modifiers based on directive prop\n            if (eventProps.includes('prevent')) event.preventDefault();\n            if (eventProps.includes('stop')) event.stopPropagation();\n            if (eventProps.includes('self')) {\n                if (event.target !== el) return;\n            }\n            /* istanbul ignore next */\n            if (eventProps.includes('outside')) {\n                if (el.contains(event.target as Node)) return;\n                if (el.offsetWidth < 1 && el.offsetHeight < 1) return;\n            }\n\n            if (eventProps.includes('enter') || eventProps.includes('meta')) {\n                if ((event as KeyboardEvent).key === 'Enter') {\n                    data.compute(event);\n                }\n            }\n\n            if (\n                (eventProps.includes('ctrl') &&\n                    (event as KeyedEvent).ctrlKey) ||\n                (eventProps.includes('alt') && (event as KeyedEvent).altKey) ||\n                (eventProps.includes('shift') &&\n                    (event as KeyedEvent).shiftKey) ||\n                (eventProps.includes('left') &&\n                    'button' in event &&\n                    (event as MouseEvent).button === 0) ||\n                (eventProps.includes('middle') &&\n                    'button' in event &&\n                    (event as MouseEvent).button === 1) ||\n                (eventProps.includes('right') &&\n                    'button' in event &&\n                    (event as MouseEvent).button === 2)\n            ) {\n                data.compute(event);\n            }\n        } else {\n            data.compute(event);\n        }\n    };\n\n    options.once = eventProps.includes('once');\n    options.passive = eventProps.includes('passive');\n\n    target.addEventListener(parts[1], handler, options);\n\n    // @ts-expect-error: We're adding a custom property to the element\n    el[EVENT_REGISTERED_FLAG] = true;\n};\n","import { UINode } from './../@types/core';\nimport { compile } from '../engine/compile';\nimport render from '../engine/render';\nimport { directives } from './directives';\n\nexport default class Component {\n    public uiNodes: UINode[] = [];\n\n    constructor() {\n        this.uiNodes = [];\n    }\n\n    public mount(el: HTMLElement | string) {\n        const rootEl =\n            el instanceof HTMLElement\n                ? el\n                : document.querySelector<HTMLElement>(el) || document.body;\n\n        this.uiNodes = compile(rootEl);\n        this.render();\n        rootEl['component'] = this;\n\n        window.leafUI = {\n            rootEl,\n            component: this\n        };\n\n        return this;\n    }\n\n    /**\n     * Force renders the DOM based on props\n     * @param {string[]=} props - Array of root level properties in state\n     * @returns {undefined}\n     */\n    public render() {\n        render(this.uiNodes, directives);\n    }\n}\n\nexport const initComponent = (element: Element) =>\n    new Component().mount(element as HTMLElement);\n","import { DirectiveData, UINode, UINodeType } from '../@types/core';\nimport { compute } from './compute';\nimport { DIRECTIVE_SHORTHANDS } from '../utils/data';\n\nexport const flattenElementChildren = (\n    rootElement: HTMLElement,\n    ignoreRootElement = false\n): HTMLElement[] => {\n    const collection: HTMLElement[] = [];\n\n    if (!ignoreRootElement) {\n        collection.push(rootElement);\n    }\n\n    for (const childElement of rootElement.children as any) {\n        if (childElement instanceof HTMLElement) {\n            collection.push(\n                ...flattenElementChildren(\n                    childElement,\n                    childElement.attributes.length === 0\n                )\n            );\n        }\n    }\n\n    return collection;\n};\n\nexport const collectRefs = (\n    element: HTMLElement | Document = document\n): Record<string, HTMLElement> => {\n    const refDirective = 'ui-ref';\n    const refElements: NodeListOf<HTMLElement> = element.querySelectorAll(\n        `[${refDirective}]`\n    );\n    const refs: Record<string, HTMLElement> = {};\n\n    refElements.forEach(refElement => {\n        const name = refElement.getAttribute(refDirective);\n\n        if (name) {\n            refs[name] = refElement;\n        }\n    });\n\n    return refs;\n};\n\nexport const initDirectives = (\n    el: HTMLElement\n): Record<string, DirectiveData> => {\n    const directives: Record<string, DirectiveData> = {};\n    const refs = collectRefs();\n\n    // @ts-ignore\n    for (const { name, value } of el.attributes) {\n        const hasDirectivePrefix = name.startsWith('ui-');\n        const hasDirectiveShorthandPrefix = Object.keys(\n            DIRECTIVE_SHORTHANDS\n        ).some(shorthand => name.startsWith(shorthand));\n\n        if (!(hasDirectivePrefix || hasDirectiveShorthandPrefix)) {\n            continue;\n        }\n\n        const directiveData = {\n            compute: compute(value, el, refs),\n            value\n        };\n\n        // Handle normal and shorthand directives=\n        const directiveName = hasDirectivePrefix\n            ? name.slice('ui-'.length)\n            : // @ts-ignore\n              `${DIRECTIVE_SHORTHANDS[name[0]]}:${name.slice(1)}`;\n\n        directives[directiveName.toLowerCase()] = directiveData;\n    }\n\n    return directives;\n};\n\nexport const createASTNode = (el: HTMLElement): UINode | undefined => {\n    const directives = initDirectives(el);\n    const hasDirectives = Object.keys(directives).length > 0;\n    const node = { el, directives, type: UINodeType.STATIC };\n\n    return hasDirectives ? node : undefined;\n};\n\nexport const compile = (\n    el: HTMLElement,\n    ignoreRootElement = false\n): UINode[] => {\n    const uiNodes: UINode[] = [];\n    const elements = flattenElementChildren(el, ignoreRootElement);\n\n    elements.forEach(element => {\n        const newASTNode = createASTNode(element);\n\n        if (newASTNode) {\n            uiNodes.push(newASTNode);\n        }\n    });\n\n    return uiNodes;\n};\n","import lazy from './../utils/lazy';\nimport { renderDirective } from './../core/directives';\nimport { rawDirectiveSplitRE } from './../utils/data';\nimport { Directives, UINode, UINodeType } from './../@types/core';\n\nconst render = (\n    uiNodes: UINode[],\n    directives: Directives,\n): void => {\n    const legalDirectiveNames = Object.keys(directives);\n    const LAZY_MODE_TIMEOUT = 25;\n\n    lazy(LAZY_MODE_TIMEOUT, function*() {\n        for (const node of uiNodes) {\n            if (node.type === UINodeType.NULL) continue;\n            const isStatic = node.type === UINodeType.STATIC;\n            if (isStatic) node.type = UINodeType.NULL;\n            yield;\n\n            if (!isStatic) continue;\n\n            for (const [directiveName, directiveData] of Object.entries(\n                node.directives\n            )) {\n                const rawDirectiveName = directiveName.split(\n                    rawDirectiveSplitRE()\n                )[0];\n\n                if (\n                    !legalDirectiveNames.includes(\n                        rawDirectiveName.toUpperCase()\n                    )\n                )\n                    continue;\n                yield;\n\n                // If affected, then push to render queue\n                if (isStatic) {\n                    const directiveProps = {\n                        el: node.el,\n                        parts: directiveName.split(rawDirectiveSplitRE()),\n                        data: directiveData,\n                        node,\n                    };\n\n                    renderDirective(directiveProps, directives);\n\n                    // [TODO] Remove this after testing\n                    delete node.directives[directiveName];\n                }\n            }\n        }\n    })();\n};\n\nexport default render;\n","/**\n * @author Aiden Bai <hello@aidenybai.com>\n * @package lucia\n */\n// Lazy allows us to delay render calls if the main thread is blocked\n// This is kind of like time slicing in React but less advanced\n// It's a generator function that yields after a certain amount of time\n// This allows the browser to render other things while the generator is running\n// It's a bit like a setTimeout but it's more accurate\n\nexport const lazy = (\n  threshold: number,\n  generatorFunction: () => Generator<undefined, void, unknown>,\n): (() => void) => {\n  const generator = generatorFunction();\n  return function next() {\n    const start = performance.now();\n    let task = null;\n    do {\n      task = generator.next();\n    } while (performance.now() - start < threshold && !task.done);\n\n    if (task.done) return;\n    setTimeout(next);\n  };\n};\n\nexport default lazy;\n","import { init } from './core';\nimport { monkeyPatchDomSetAttributeToAllowAtSymbols } from './utils/reset';\nexport * from './@types';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    monkeyPatchDomSetAttributeToAllowAtSymbols();\n    init();\n\n    document.querySelectorAll('[ui-lazy]').forEach(el => {\n        el.removeAttribute('ui-lazy');\n    });\n});\n","/**\n * @author Caleb Porzio\n * @package livewire/livewire\n */\nexport function monkeyPatchDomSetAttributeToAllowAtSymbols() {\n    // Because morphdom may add attributes to elements containing \"@\" symbols\n    // like in the case of an Alpine `@click` directive, we have to patch\n    // the standard Element.setAttribute method to allow this to work.\n    let original = Element.prototype.setAttribute;\n\n    let hostDiv = document.createElement('div');\n\n    Element.prototype.setAttribute = function newSetAttribute(name, value) {\n        if (!name.includes('@')) {\n            return original.call(this, name, value);\n        }\n\n        hostDiv.innerHTML = `<span ${name}=\"${value}\"></span>`;\n\n        let attr = (hostDiv.firstElementChild)!.getAttributeNode(name)!;\n\n        (hostDiv.firstElementChild)!.removeAttributeNode(attr);\n\n        this.setAttributeNode(attr);\n    };\n}\n","import Component from './component';\n\n/**\n * Initialize Your Leaf UI root component\n * @param {HTMLElement|Document} element - Root element to find uninitialized components\n */\nexport const init = (element: HTMLElement | Document = document): void => {\n    const leafUI = new Component();\n    const rootElement = element instanceof Document ? element.body : element;\n\n    leafUI.mount(rootElement);\n};\n"],"names":["UINodeType","DIRECTIVE_SHORTHANDS","error","err","expression","el","message","console","warn","Connection","connect","type","uiData","dom","pageState","component","element","closest","componentData","JSON","parse","getAttribute","document","querySelectorAll","forEach","i","attr","key","fetch","window","location","href","stringify","payload","params","method","methodArgs","data","config","credentials","headers","Content-Type","Accept","X-Leaf-UI","this","Referer","then","response","ok","_context","text","_leafUIConfig","state","diff","html","nodeName","body","res","arraysMatch","a","b","Array","isArray","length","every","val","index","leafUI","Dom","getBody","removeScripts","DOMParser","parseFromString","scripts","getElementsByTagName","remove","wrap","node","wrapper","createElement","appendChild","getRootNode","firstChild","getNodeType","nodeType","tagName","toLowerCase","getNodeContent","children","textContent","newNode","oldNode","structuredNewNode","diffElements","newNodes","prototype","slice","call","oldNodes","count","parentNode","removeChild","HTMLScriptElement","src","innerHTML","newNodeClone","cloneNode","replaceChild","Object","values","_node$parentNode","attributes","_oldNodes$index$paren2","nIndex","_node$parentNode$attr2","attribute","_oldNodes$index","_oldNodes$index$paren3","setAttribute","name","value","keys","_oldNodes$index2","_oldNodes$index3","templateContent","fragment","createDocumentFragment","initComponent","replaceWith","compute","refs","computeFunction","Function","join","emit","options","dispatchGlobal","event","CustomEvent","dispatchEvent","directives","ON","parts","eventProps","EVENT_REGISTERED_FLAG","target","some","prop","String","includes","once","passive","addEventListener","KeyboardEvent","test","whitelistedKeycodes","eventProp","isNaN","push","Number","keyCode","preventDefault","stopPropagation","contains","offsetWidth","offsetHeight","ctrlKey","altKey","shiftKey","button","renderDirective","props","toUpperCase","Component","uiNodes","_proto","mount","rootEl","HTMLElement","querySelector","ignoreRootElement","flattenElementChildren","rootElement","collection","childElement","newASTNode","refElements","refElement","collectRefs","hasDirectivePrefix","startsWith","hasDirectiveShorthandPrefix","shorthand","directiveData","directiveName","initDirectives","STATIC","undefined","createASTNode","compile","render","generator","legalDirectiveNames","_iterator","NULL","isStatic","_i","entries","_Object$entries$_i","rawDirectiveName","split","directiveProps","generatorFunction","next","start","performance","now","task","done","setTimeout","original","hostDiv","Element","firstElementChild","getAttributeNode","removeAttributeNode","setAttributeNode","Document","init","removeAttribute"],"mappings":"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"}