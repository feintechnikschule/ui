{"version":3,"file":"ui.cjs.production.min.js","sources":["../src/@types/core.ts","../src/utils/error.ts","../src/engine/template.ts","../src/server/connection.ts","../src/utils/data.ts","../src/engine/dom.ts","../src/engine/compute.ts","../src/engine/compile.ts","../src/utils/lazy.ts","../src/core/directives/on.ts","../src/core/directives.ts","../src/engine/render.ts","../src/core/component.ts","../src/core/index.ts","../src/utils/reset.ts","../src/index.ts"],"sourcesContent":["export type Directives = Record<string, (props: DirectiveProps) => void>;\n\nexport interface DirectiveProps {\n    el: HTMLElement;\n    parts: string[];\n    data: DirectiveData;\n    node?: UINode;\n}\n\nexport type KeyedEvent = KeyboardEvent | MouseEvent | TouchEvent;\n\nexport interface DirectiveData {\n    compute: (event?: Event) => any;\n    value: string;\n}\n\nexport interface UINode {\n    directives: Record<string, DirectiveData>;\n    el: HTMLElement;\n    type: UINodeType;\n}\n\nexport enum UINodeType {\n    NULL = -1,\n    STATIC = 0,\n    DYNAMIC = 1\n}\n\nexport interface LeafUIConfig {\n    el: HTMLElement;\n    data: Record<string, any>;\n    methods: string[];\n    id: string;\n    path: string;\n    requestMethod: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD';\n    component: string;\n}\n","export const error = (\n    err: string,\n    expression?: string,\n    el?: HTMLElement\n): void => {\n    let message = `LeafUI Error: \"${err}\"`;\n    if (expression) message += `\\n\\nExpression: \"${expression}\"`;\n    if (el) message += `\\nElement:`;\n    console.warn(message, el);\n};\n","export default class template {\n    static compileString(str: string) {\n        if (str.includes('$eval(')) {\n            const evalString = str.match(/\\$eval\\((.*)\\)/)![1];\n            return eval(evalString);\n        }\n\n        return str;\n    }\n}\n","import Dom from './../engine/dom';\nimport template from './../engine/template';\nimport { error } from './../utils/error';\n\nexport default class Connection {\n    protected static headers: Record<string, string>;\n\n    public static connect(\n        type: string,\n        uiData: Record<string, any>,\n        dom: typeof Dom\n    ) {\n        const payload = {\n            type,\n            payload: {\n                params: [],\n                method: uiData.method,\n                methodArgs: template.compileString(uiData.methodArgs),\n                component: uiData.config.component,\n                data: uiData.config.data\n            }\n        };\n\n        return fetch(\n            `${window.location.href}?_leaf_ui_config=${JSON.stringify(\n                payload\n            )}`,\n            {\n                method: uiData.config.method,\n                // This enables \"cookies\".\n                credentials: 'same-origin',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Accept: 'text/html, application/xhtml+xml',\n                    'X-Leaf-UI': 'true',\n\n                    // set Custom Headers\n                    ...this.headers,\n\n                    // We'll set this explicitly to mitigate potential interference from ad-blockers/etc.\n                    Referer: window.location.href\n                }\n            }\n        ).then(async response => {\n            if (response.ok) {\n                response.text().then(response => {\n                    const data = JSON.parse(response);\n                    window._leafUIConfig.data = data.state;\n                    dom.diff(data.html, document.body!);\n                });\n            } else {\n                error(await response.text().then(res => res));\n            }\n        });\n    }\n\n    //    public sendMessage(message) {\n    //        // Forward the query string for the ajax requests.\n\n    //            .then(response => {\n    //                if (response.ok) {\n    //                    response.text().then(response => {\n    //                        if (this.isOutputFromDump(response)) {\n    //                            this.onError(message);\n    //                            this.showHtmlModal(response);\n    //                        } else {\n    //                            this.onMessage(\n    //                                message,\n    //                                JSON.parse(response)\n    //                            );\n    //                        }\n    //                    });\n    //                } else {\n    //                    if (\n    //                        this.onError(\n    //                            message,\n    //                            response.status,\n    //                            response\n    //                        ) === false\n    //                    )\n    //                        return;\n\n    //                    if (response.status === 419) {\n    //                        if (store.sessionHasExpired) return;\n\n    //                        store.sessionHasExpired = true;\n\n    //                        this.showExpiredMessage(\n    //                            response,\n    //                            message\n    //                        );\n    //                    } else {\n    //                        response.text().then(response => {\n    //                            this.showHtmlModal(response);\n    //                        });\n    //                    }\n    //                }\n    //            })\n    //            .catch(() => {\n    //                this.onError(message);\n    //            });\n    //    }\n}\n","import Component from './../core/component';\nimport { LeafUIConfig } from './../@types/core';\n\nexport const eventDirectivePrefixRE = (): RegExp => /on|@/gim;\nexport const rawDirectiveSplitRE = (): RegExp => /:|\\./gim;\n\nexport const hasDirectiveRE = (): RegExp => {\n    return new RegExp(\n        `(ui-|${Object.keys(DIRECTIVE_SHORTHANDS).join('|')})\\\\w+`,\n        'gim'\n    );\n};\n\nexport const expressionPropRE = (prop: string): RegExp => {\n    // Utilizes \\b (word boundary) for prop differentiation.\n    // Fails when next character is a \\w (Word).\n    return new RegExp(`\\\\b${prop}\\\\b`, 'gim');\n};\n\nexport enum DIRECTIVE_SHORTHANDS {\n    '@' = 'on',\n    ':' = 'bind'\n}\n\nexport function arraysMatch(a: any[], b: any[]) {\n    return (\n        Array.isArray(a) &&\n        Array.isArray(b) &&\n        a.length === b.length &&\n        a.every((val, index) => val === b[index])\n    );\n}\n\ndeclare global {\n    interface Window {\n        leafUI: Component;\n        _leafUIConfig: LeafUIConfig;\n    }\n\n    interface HTMLElement {\n        component: Component;\n        compile: () => void;\n    }\n}\n\nwindow.leafUI = window.leafUI || {};\n","import { initComponent } from './../core/component';\nimport { DIRECTIVE_SHORTHANDS, arraysMatch } from './../utils/data';\n\nexport default class Dom {\n    static diff(newNode: string, oldNode: HTMLElement): void {\n        const newDomBody = Dom.getBodyWithoutScripts(newNode);\n        const diff = Dom.compareNodesAndReturnChanges(newDomBody, oldNode);\n\n        for (let i = 0; i < diff.length; i++) {\n            if (\n                diff[i] instanceof HTMLScriptElement ||\n                diff[i].oldNode.children.length !== 0\n            ) {\n                continue;\n            }\n\n            if (\n                arraysMatch(\n                    Object.keys(diff[i].oldNode.attributes),\n                    Object.keys(diff[i].newNode.attributes)\n                ) &&\n                arraysMatch(\n                    Object.values(diff[i].oldNode.attributes),\n                    Object.values(diff[i].newNode.attributes)\n                ) &&\n                diff[i].oldNode.innerHTML === diff[i].newNode.innerHTML\n            ) {\n                continue;\n            }\n\n            const hasDirectivePrefix = Object.values(diff[i].oldNode.attributes)\n                .map(attr => attr.name.startsWith('ui-'))\n                .includes(true);\n            const hasDirectiveShorthandPrefix = Object.keys(\n                DIRECTIVE_SHORTHANDS\n            ).some(shorthand =>\n                Object.values(diff[i].oldNode.attributes)\n                    .map(attr => attr.name.startsWith(shorthand))\n                    .includes(true)\n            );\n\n            if (hasDirectivePrefix || hasDirectiveShorthandPrefix) {\n                diff[i].oldNode.innerHTML = diff[i].newNode.innerHTML;\n\n                for (let j = 0; j < diff[i].newNode.attributes.length; j++) {\n                    const attr = diff[i].newNode.attributes[j];\n\n                    if (\n                        attr.name.startsWith('ui-') ||\n                        Object.keys(DIRECTIVE_SHORTHANDS).some(shorthand =>\n                            Object.values(diff[i].oldNode.attributes)\n                                .map(attr => attr.name.startsWith(shorthand))\n                                .includes(true)\n                        )\n                    ) {\n                        if (\n                            diff[i].oldNode.getAttribute(attr.name) !==\n                            attr.value\n                        ) {\n                            diff[i].oldNode.replaceWith(diff[i].newNode);\n                            initComponent(diff[i].newNode);\n                        }\n\n                        continue;\n                    }\n\n                    diff[i].oldNode.setAttribute(attr.name, attr.value);\n                }\n\n                continue;\n            }\n\n            diff[i].oldNode.replaceWith(diff[i].newNode);\n        }\n    }\n\n    static getBodyWithoutScripts(html: string): HTMLElement {\n        const parser = new DOMParser();\n        const dom = parser.parseFromString(html, 'text/html');\n        const scripts = dom.getElementsByTagName('script');\n\n        for (let i = 0; i < scripts.length; i++) {\n            scripts[i].remove();\n        }\n\n        return dom.body;\n    }\n\n    static flattenDomIntoArray(node: HTMLElement): HTMLCollection {\n        return node.getElementsByTagName('*');\n    }\n\n    static compareNodesAndReturnChanges(\n        newNode: HTMLElement,\n        oldNode: HTMLElement\n    ): Record<string, Element>[] {\n        const newNodes = Dom.flattenDomIntoArray(newNode);\n        const oldNodes = Dom.flattenDomIntoArray(oldNode);\n        const changes = [];\n\n        for (let i = 0; i < newNodes.length; i++) {\n            if (newNodes[i] !== oldNodes[i]) {\n                changes.push({\n                    oldNode: oldNodes[i],\n                    newNode: newNodes[i]\n                });\n            }\n        }\n\n        return changes;\n    }\n}\n","import { error } from '../utils/error';\nimport Connection from './../server/connection';\nimport Dom from './dom';\n\nexport const compute = (\n    expression: string,\n    el?: HTMLElement,\n    refs: Record<string, HTMLElement> = {}\n): ((event?: Event) => any) => {\n    const specialPropertiesNames = ['$el', '$emit', '$event', '$refs', '$dom'];\n\n    // This \"revives\" a function from a string, only using the new Function syntax once during compilation.\n    // This is because raw function is ~50,000x faster than new Function\n    const computeFunction = new Function(\n        `return (${specialPropertiesNames.join(',')}) => {\n            const method = ${JSON.stringify(expression)}.split('(')[0];\n            const methodArgs = ${JSON.stringify(expression)}.substring(${JSON.stringify(expression)}.indexOf('(') + 1, ${JSON.stringify(expression)}.lastIndexOf(')'));\n\n            if (!window._leafUIConfig.methods.includes(method)) {\n                return error(new ReferenceError(method + ' is not defined'), method, $el);\n            }\n\n            (${\n                Connection.connect\n            })('callMethod', { method, methodArgs, config: window._leafUIConfig }, $dom);\n        }`\n    )();\n\n    const emit = (\n        name: string,\n        options?: CustomEventInit,\n        dispatchGlobal = true\n    ) => {\n        const event = new CustomEvent(name, options);\n        const target = dispatchGlobal ? window : el || window;\n\n        target.dispatchEvent(event);\n    };\n\n    return (event?: Event) => {\n        try {\n            return computeFunction(el, emit, event, refs, Dom);\n        } catch (err) {\n            error(err as string, expression, el);\n        }\n    };\n};\n","import { DirectiveData, UINode, UINodeType } from '../@types/core';\nimport { compute } from './compute';\nimport { DIRECTIVE_SHORTHANDS } from '../utils/data';\n\nexport const flattenElementChildren = (\n    rootElement: HTMLElement,\n    ignoreRootElement = false\n): HTMLElement[] => {\n    const collection: HTMLElement[] = [];\n\n    if (!ignoreRootElement) {\n        collection.push(rootElement);\n    }\n\n    for (const childElement of rootElement.children as any) {\n        if (childElement instanceof HTMLElement) {\n            collection.push(\n                ...flattenElementChildren(\n                    childElement,\n                    childElement.attributes.length === 0\n                )\n            );\n        }\n    }\n\n    return collection;\n};\n\nexport const collectRefs = (\n    element: HTMLElement | Document = document\n): Record<string, HTMLElement> => {\n    const refDirective = 'ui-ref';\n    const refElements: NodeListOf<HTMLElement> = element.querySelectorAll(\n        `[${refDirective}]`\n    );\n    const refs: Record<string, HTMLElement> = {};\n\n    refElements.forEach(refElement => {\n        const name = refElement.getAttribute(refDirective);\n\n        if (name) {\n            refs[name] = refElement;\n        }\n    });\n\n    return refs;\n};\n\nexport const initDirectives = (\n    el: HTMLElement\n): Record<string, DirectiveData> => {\n    const directives: Record<string, DirectiveData> = {};\n    const refs = collectRefs();\n\n    // @ts-ignore\n    for (const { name, value } of el.attributes) {\n        const hasDirectivePrefix = name.startsWith('ui-');\n        const hasDirectiveShorthandPrefix = Object.keys(\n            DIRECTIVE_SHORTHANDS\n        ).some(shorthand => name.startsWith(shorthand));\n\n        if (!(hasDirectivePrefix || hasDirectiveShorthandPrefix)) {\n            continue;\n        }\n\n        const directiveData = {\n            compute: compute(value, el, refs),\n            value\n        };\n\n        // Handle normal and shorthand directives=\n        const directiveName = hasDirectivePrefix\n            ? name.slice('ui-'.length)\n            : // @ts-ignore\n              `${DIRECTIVE_SHORTHANDS[name[0]]}:${name.slice(1)}`;\n\n        directives[directiveName.toLowerCase()] = directiveData;\n    }\n\n    return directives;\n};\n\nexport const createASTNode = (el: HTMLElement): UINode | undefined => {\n    const directives = initDirectives(el);\n    const hasDirectives = Object.keys(directives).length > 0;\n    const node = { el, directives, type: UINodeType.STATIC };\n\n    return hasDirectives ? node : undefined;\n};\n\nexport const compile = (\n    el: HTMLElement,\n    ignoreRootElement = false\n): UINode[] => {\n    const uiNodes: UINode[] = [];\n    const elements = flattenElementChildren(el, ignoreRootElement);\n\n    elements.forEach(element => {\n        const newASTNode = createASTNode(element);\n\n        if (newASTNode) {\n            uiNodes.push(newASTNode);\n        }\n    });\n\n    return uiNodes;\n};\n","/**\n * @author Aiden Bai <hello@aidenybai.com>\n * @package lucia\n */\n// Lazy allows us to delay render calls if the main thread is blocked\n// This is kind of like time slicing in React but less advanced\n// It's a generator function that yields after a certain amount of time\n// This allows the browser to render other things while the generator is running\n// It's a bit like a setTimeout but it's more accurate\n\nexport const lazy = (\n  threshold: number,\n  generatorFunction: () => Generator<undefined, void, unknown>,\n): (() => void) => {\n  const generator = generatorFunction();\n  return function next() {\n    const start = performance.now();\n    let task = null;\n    do {\n      task = generator.next();\n    } while (performance.now() - start < threshold && !task.done);\n\n    if (task.done) return;\n    setTimeout(next);\n  };\n};\n\nexport default lazy;\n","import { DirectiveProps, KeyedEvent } from './../../@types/core';\n\nexport const onDirective = ({ el, parts, data }: DirectiveProps): void => {\n    const options: Record<string, boolean> = {};\n    const globalScopeEventProps = ['outside', 'global'];\n    const eventProps = parts.slice(2);\n    const EVENT_REGISTERED_FLAG = `__on_${parts[1]}_registered`;\n\n    // @ts-expect-error: We're adding a custom property to the element\n    if (el[EVENT_REGISTERED_FLAG]) return;\n\n    const target = globalScopeEventProps.some(prop =>\n        String(eventProps).includes(prop)\n    )\n        ? window\n        : el;\n\n    const handler = (event: Event) => {        \n        if (eventProps.length > 0) {\n            if (\n                event instanceof KeyboardEvent &&\n                /\\d/gim.test(String(eventProps))\n            ) {\n                const whitelistedKeycodes: number[] = [];\n                eventProps.forEach(eventProp => {\n                    // @ts-expect-error: eventProp can be a string, but isNaN only accepts number\n                    if (!isNaN(eventProp)) {\n                        whitelistedKeycodes.push(Number(eventProp));\n                    }\n                });\n\n                if (!whitelistedKeycodes.includes(event.keyCode)) return;\n            }\n\n            // Parse event modifiers based on directive prop\n            if (eventProps.includes('prevent')) event.preventDefault();\n            if (eventProps.includes('stop')) event.stopPropagation();\n            if (eventProps.includes('self')) {\n                if (event.target !== el) return;\n            }\n            /* istanbul ignore next */\n            if (eventProps.includes('outside')) {\n                if (el.contains(event.target as Node)) return;\n                if (el.offsetWidth < 1 && el.offsetHeight < 1) return;\n            }\n\n            if (eventProps.includes('enter') || eventProps.includes('meta')) {\n                if ((event as KeyboardEvent).key === 'Enter') {\n                    data.compute(event);\n                }\n            }\n\n            if (\n                (eventProps.includes('ctrl') &&\n                    (event as KeyedEvent).ctrlKey) ||\n                (eventProps.includes('alt') && (event as KeyedEvent).altKey) ||\n                (eventProps.includes('shift') &&\n                    (event as KeyedEvent).shiftKey) ||\n                (eventProps.includes('left') &&\n                    'button' in event &&\n                    (event as MouseEvent).button === 0) ||\n                (eventProps.includes('middle') &&\n                    'button' in event &&\n                    (event as MouseEvent).button === 1) ||\n                (eventProps.includes('right') &&\n                    'button' in event &&\n                    (event as MouseEvent).button === 2)\n            ) {\n                data.compute(event);\n            }\n        } else {\n            data.compute(event);\n        }\n    };\n\n    options.once = eventProps.includes('once');\n    options.passive = eventProps.includes('passive');\n\n    target.addEventListener(parts[1], handler, options);\n\n    // @ts-expect-error: We're adding a custom property to the element\n    el[EVENT_REGISTERED_FLAG] = true;\n};\n","import { DirectiveProps, Directives } from './../@types/core';\n// import { bindDirective } from './directives/bind';\n// import { modelDirective } from './directives/model';\nimport { onDirective } from './directives/on';\n\nexport const directives: Directives = {\n    // BIND: bindDirective,\n    // MODEL: modelDirective,\n    ON: onDirective,\n};\n\nexport const renderDirective = (\n    props: DirectiveProps,\n    directives: Directives\n): void => {\n    directives[props.parts[0].toUpperCase()](props);\n};\n","import lazy from './../utils/lazy';\nimport { renderDirective } from './../core/directives';\nimport { rawDirectiveSplitRE } from './../utils/data';\nimport { Directives, UINode, UINodeType } from './../@types/core';\n\nconst render = (\n    uiNodes: UINode[],\n    directives: Directives,\n): void => {\n    const legalDirectiveNames = Object.keys(directives);\n    const LAZY_MODE_TIMEOUT = 25;\n\n    lazy(LAZY_MODE_TIMEOUT, function*() {\n        for (const node of uiNodes) {\n            if (node.type === UINodeType.NULL) continue;\n            const isStatic = node.type === UINodeType.STATIC;\n            if (isStatic) node.type = UINodeType.NULL;\n            yield;\n\n            if (!isStatic) continue;\n\n            for (const [directiveName, directiveData] of Object.entries(\n                node.directives\n            )) {\n                const rawDirectiveName = directiveName.split(\n                    rawDirectiveSplitRE()\n                )[0];\n\n                if (\n                    !legalDirectiveNames.includes(\n                        rawDirectiveName.toUpperCase()\n                    )\n                )\n                    continue;\n                yield;\n\n                // If affected, then push to render queue\n                if (isStatic) {\n                    const directiveProps = {\n                        el: node.el,\n                        parts: directiveName.split(rawDirectiveSplitRE()),\n                        data: directiveData,\n                        node,\n                    };\n\n                    renderDirective(directiveProps, directives);\n\n                    // [TODO] Remove this after testing\n                    delete node.directives[directiveName];\n                }\n            }\n        }\n    })();\n};\n\nexport default render;\n","import { UINode } from './../@types/core';\nimport { compile } from '../engine/compile';\nimport render from '../engine/render';\nimport { directives } from './directives';\n\nexport default class Component {\n    public uiNodes: UINode[] = [];\n\n    constructor() {\n        this.uiNodes = [];\n    }\n\n    public mount(el: HTMLElement | string) {\n        const rootEl =\n            el instanceof HTMLElement\n                ? el\n                : document.querySelector<HTMLElement>(el) || document.body;\n\n        this.uiNodes = compile(rootEl);\n        this.render();\n        rootEl['component'] = this;\n\n        return this;\n    }\n\n    /**\n     * Force renders the DOM based on props\n     * @param {string[]=} props - Array of root level properties in state\n     * @returns {undefined}\n     */\n    public render() {\n        render(this.uiNodes, directives);\n    }\n}\n\nexport const initComponent = (element: Element) =>\n    new Component().mount(element as HTMLElement);\n","import Component from './component';\n\n/**\n * Initialize Your Leaf UI root component\n * @param {HTMLElement|Document} element - Root element to find uninitialized components\n */\nexport const init = (element: HTMLElement | Document = document): void => {\n    const leafUI = new Component();\n    const rootElement = element instanceof Document ? element.body : element;\n\n    leafUI.mount(rootElement);\n};\n","/**\n * @author Caleb Porzio\n * @package livewire/livewire\n */\nexport function monkeyPatchDomSetAttributeToAllowAtSymbols() {\n    // Because morphdom may add attributes to elements containing \"@\" symbols\n    // like in the case of an Alpine `@click` directive, we have to patch\n    // the standard Element.setAttribute method to allow this to work.\n    let original = Element.prototype.setAttribute;\n\n    let hostDiv = document.createElement('div');\n\n    Element.prototype.setAttribute = function newSetAttribute(name, value) {\n        if (!name.includes('@')) {\n            return original.call(this, name, value);\n        }\n\n        hostDiv.innerHTML = `<span ${name}=\"${value}\"></span>`;\n\n        let attr = (hostDiv.firstElementChild)!.getAttributeNode(name)!;\n\n        (hostDiv.firstElementChild)!.removeAttributeNode(attr);\n\n        this.setAttributeNode(attr);\n    };\n}\n","import { init } from './core';\nimport { monkeyPatchDomSetAttributeToAllowAtSymbols } from './utils/reset';\nexport * from './@types';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    monkeyPatchDomSetAttributeToAllowAtSymbols();\n    init();\n\n    document.querySelectorAll('[ui-lazy]').forEach(el => {\n        el.removeAttribute('ui-lazy');\n    });\n});\n"],"names":["UINodeType","error","err","expression","el","message","console","warn","template","compileString","str","includes","evalString","match","eval","Connection","connect","type","uiData","dom","payload","params","method","methodArgs","component","config","data","fetch","window","location","href","JSON","stringify","credentials","headers","Content-Type","Accept","X-Leaf-UI","this","Referer","then","response","ok","_context","text","parse","_leafUIConfig","state","diff","html","document","body","res","rawDirectiveSplitRE","DIRECTIVE_SHORTHANDS","arraysMatch","a","b","Array","isArray","length","every","val","index","leafUI","Dom","newNode","oldNode","newDomBody","getBodyWithoutScripts","compareNodesAndReturnChanges","i","HTMLScriptElement","children","Object","keys","attributes","values","innerHTML","hasDirectivePrefix","map","attr","name","startsWith","hasDirectiveShorthandPrefix","some","shorthand","j","getAttribute","value","replaceWith","initComponent","setAttribute","DOMParser","parseFromString","scripts","getElementsByTagName","remove","flattenDomIntoArray","node","newNodes","oldNodes","changes","push","compute","refs","computeFunction","Function","join","emit","options","dispatchGlobal","event","CustomEvent","dispatchEvent","flattenElementChildren","rootElement","ignoreRootElement","collection","childElement","HTMLElement","collectRefs","element","refElements","querySelectorAll","forEach","refElement","initDirectives","directives","directiveData","directiveName","slice","toLowerCase","createASTNode","STATIC","undefined","compile","uiNodes","newASTNode","lazy","threshold","generatorFunction","generator","next","start","performance","now","task","done","setTimeout","onDirective","parts","eventProps","EVENT_REGISTERED_FLAG","target","prop","String","once","passive","addEventListener","KeyboardEvent","test","whitelistedKeycodes","eventProp","isNaN","Number","keyCode","preventDefault","stopPropagation","contains","offsetWidth","offsetHeight","key","ctrlKey","altKey","shiftKey","button","ON","renderDirective","props","toUpperCase","render","legalDirectiveNames","_iterator","NULL","isStatic","_i","entries","_Object$entries$_i","rawDirectiveName","split","directiveProps","Component","_proto","mount","rootEl","querySelector","init","Document","monkeyPatchDomSetAttributeToAllowAtSymbols","original","Element","prototype","hostDiv","createElement","call","firstElementChild","getAttributeNode","removeAttributeNode","setAttributeNode","removeAttribute"],"mappings":"miQAsBA,IAAYA,YAAZ,SAAYA,GACRA,oBACAA,uBACAA,yBAHJ,CAAYA,aAAAA,gBCtBL,IAAMC,MAAQ,SACjBC,EACAC,EACAC,GAEA,IAAIC,oBAA4BH,MAC5BC,IAAYE,uBAA+BF,OAC3CC,IAAIC,iBACRC,QAAQC,KAAKF,EAASD,ICRLI,oBAAQ,qBAQxB,OARwBA,SAClBC,cAAP,uBAAqBC,KACjB,GAAIA,IAAIC,SAAS,UAAW,CACxB,IAAMC,WAAaF,IAAIG,MAAM,kBAAmB,GAChD,OAAOC,KAAKF,YAGhB,OAAOF,iBCHMK,sBAAU,cAkD1B,OAlD0BA,EAGbC,QAAP,SACHC,EACAC,EACAC,GAEA,IAAMC,EAAU,CACZH,KAAAA,EACAG,QAAS,CACLC,OAAQ,GACRC,OAAQJ,EAAOI,OACfC,WAAYf,SAASC,cAAcS,EAAOK,YAC1CC,UAAWN,EAAOO,OAAOD,UACzBE,KAAMR,EAAOO,OAAOC,OAI5B,OAAOC,MACAC,OAAOC,SAASC,yBAAwBC,KAAKC,UAC5CZ,GAEJ,CACIE,OAAQJ,EAAOO,OAAOH,OAEtBW,YAAa,cACbC,kBACIC,eAAgB,mBAChBC,OAAQ,mCACRC,YAAa,QAGVC,KAAKJ,SAGRK,QAASX,OAAOC,SAASC,SAGnCU,gBAAI,oDAAC,WAAMC,GAAQ,+CAAA,6BAAA,OAAA,IACbA,EAASC,IAAEC,SAAA,MACXF,EAASG,OAAOJ,MAAK,SAAAC,GACjB,IAAMf,EAAOK,KAAKc,MAAMJ,GACxBb,OAAOkB,cAAcpB,KAAOA,EAAKqB,MACjC5B,EAAI6B,KAAKtB,EAAKuB,KAAMC,SAASC,SAC9BR,SAAA,MAAA,OAEE,OAFFA,KAEH1C,MAAK0C,SAAOF,EAASG,OAAOJ,MAAK,SAAAY,GAAG,OAAIA,KAAI,OAAAT,aAAA,cAAA,OAAA,UAAA,0BAEnD,mBAAA,0CCjDIU,oBAAsB,WAAH,MAAiB,WAerCC,8BAKIC,YAAYC,EAAUC,GAClC,OACIC,MAAMC,QAAQH,IACdE,MAAMC,QAAQF,IACdD,EAAEI,SAAWH,EAAEG,QACfJ,EAAEK,OAAM,SAACC,EAAKC,GAAK,OAAKD,IAAQL,EAAEM,OAV1C,SAAYT,GACRA,YACAA,cAFJ,CAAYA,uBAAAA,0BA0BZ1B,OAAOoC,OAASpC,OAAOoC,QAAU,OC1CZC,eAAG,cA2GnB,OA3GmBA,EACbjB,KAAP,SAAYkB,EAAiBC,GAIzB,IAHA,IAAMC,EAAaH,EAAII,sBAAsBH,GACvClB,EAAOiB,EAAIK,6BAA6BF,EAAYD,iBAGtD,GACInB,EAAKuB,aAAcC,mBACiB,IAApCxB,EAAKuB,GAAGJ,QAAQM,SAASb,OAC3B,iBAIF,GACIL,YACImB,OAAOC,KAAK3B,EAAKuB,GAAGJ,QAAQS,YAC5BF,OAAOC,KAAK3B,EAAKuB,GAAGL,QAAQU,cAEhCrB,YACImB,OAAOG,OAAO7B,EAAKuB,GAAGJ,QAAQS,YAC9BF,OAAOG,OAAO7B,EAAKuB,GAAGL,QAAQU,cAElC5B,EAAKuB,GAAGJ,QAAQW,YAAc9B,EAAKuB,GAAGL,QAAQY,UAChD,iBAIF,IAAMC,EAAqBL,OAAOG,OAAO7B,EAAKuB,GAAGJ,QAAQS,YACpDI,KAAI,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,WAAW,UACjCxE,UAAS,GACRyE,EAA8BV,OAAOC,KACvCrB,sBACF+B,MAAK,SAAAC,GAAS,OACZZ,OAAOG,OAAO7B,EAAKuB,GAAGJ,QAAQS,YACzBI,KAAI,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,WAAWG,MACjC3E,UAAS,MAGlB,GAAIoE,GAAsBK,EAA6B,CACnDpC,EAAKuB,GAAGJ,QAAQW,UAAY9B,EAAKuB,GAAGL,QAAQY,UAE5C,IAAK,IAAIS,EAAI,EAAGA,EAAIvC,EAAKuB,GAAGL,QAAQU,WAAWhB,OAAQ2B,IAAK,CACxD,IAAMN,EAAOjC,EAAKuB,GAAGL,QAAQU,WAAWW,GAGpCN,EAAKC,KAAKC,WAAW,QACrBT,OAAOC,KAAKrB,sBAAsB+B,MAAK,SAAAC,GAAS,OAC5CZ,OAAOG,OAAO7B,EAAKuB,GAAGJ,QAAQS,YACzBI,KAAI,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,WAAWG,MACjC3E,UAAS,MAIdqC,EAAKuB,GAAGJ,QAAQqB,aAAaP,EAAKC,QAClCD,EAAKQ,QAELzC,EAAKuB,GAAGJ,QAAQuB,YAAY1C,EAAKuB,GAAGL,SACpCyB,cAAc3C,EAAKuB,GAAGL,UAM9BlB,EAAKuB,GAAGJ,QAAQyB,aAAaX,EAAKC,KAAMD,EAAKQ,OAChD,iBAKLzC,EAAKuB,GAAGJ,QAAQuB,YAAY1C,EAAKuB,GAAGL,UAhE/BK,EAAI,EAAGA,EAAIvB,EAAKY,OAAQW,UAkEpCN,EAEMI,sBAAP,SAA6BpB,GAKzB,IAJA,IACM9B,GADS,IAAI0E,WACAC,gBAAgB7C,EAAM,aACnC8C,EAAU5E,EAAI6E,qBAAqB,UAEhCzB,EAAI,EAAGA,EAAIwB,EAAQnC,OAAQW,IAChCwB,EAAQxB,GAAG0B,SAGf,OAAO9E,EAAIgC,MACdc,EAEMiC,oBAAP,SAA2BC,GACvB,OAAOA,EAAKH,qBAAqB,MACpC/B,EAEMK,6BAAP,SACIJ,EACAC,GAMA,IAJA,IAAMiC,EAAWnC,EAAIiC,oBAAoBhC,GACnCmC,EAAWpC,EAAIiC,oBAAoB/B,GACnCmC,EAAU,GAEP/B,EAAI,EAAGA,EAAI6B,EAASxC,OAAQW,IAC7B6B,EAAS7B,KAAO8B,EAAS9B,IACzB+B,EAAQC,KAAK,CACTpC,QAASkC,EAAS9B,GAClBL,QAASkC,EAAS7B,KAK9B,OAAO+B,QCzGFE,QAAU,SACnBrG,EACAC,EACAqG,YAAAA,IAAAA,EAAoC,IAEpC,IAIMC,EAAkB,IAAIC,oBAJG,CAAC,MAAO,QAAS,SAAU,QAAS,QAK7BC,KAAK,2CAClB7E,KAAKC,UAAU7B,sDACX4B,KAAKC,UAAU7B,iBAAyB4B,KAAKC,UAAU7B,yBAAiC4B,KAAKC,UAAU7B,0NAOxHY,WAAWC,kGAVC,GAelB6F,EAAO,SACT3B,EACA4B,EACAC,YAAAA,IAAAA,GAAiB,GAEjB,IAAMC,EAAQ,IAAIC,YAAY/B,EAAM4B,IACrBC,EAAiBnF,OAASxB,GAAMwB,QAExCsF,cAAcF,IAGzB,OAAO,SAACA,GACJ,IACI,OAAON,EAAgBtG,EAAIyG,EAAMG,EAAOP,EAAMxC,KAChD,MAAO/D,GACLD,MAAMC,EAAeC,EAAYC,MCvChC+G,uBAAyB,SAAzBA,EACTC,EACAC,YAAAA,IAAAA,GAAoB,GAEpB,IAAMC,EAA4B,GAE7BD,GACDC,EAAWf,KAAKa,GAGpB,4CAA2BA,EAAY3C,yBAAiB,CAAA,IAA7C8C,UACHA,aAAwBC,aACxBF,EAAWf,WAAXe,EACOH,EACCI,EACmC,IAAnCA,EAAa3C,WAAWhB,SAMxC,OAAO0D,GAGEG,YAAc,SACvBC,YAAAA,IAAAA,EAAkCxE,UAElC,IACMyE,EAAuCD,EAAQE,6BAG/CnB,EAAoC,GAU1C,OARAkB,EAAYE,SAAQ,SAAAC,GAChB,IAAM5C,EAAO4C,EAAWtC,aAPP,UASbN,IACAuB,EAAKvB,GAAQ4C,MAIdrB,GAGEsB,eAAiB,SAC1B3H,GAMA,IAJA,MAAM4H,EAA4C,GAC5CvB,EAAOgB,2BAGgC,cAAhCvC,IAAAA,KAAMO,IAAAA,MACTV,EAAqBG,EAAKC,WAAW,OACrCC,EAA8BV,OAAOC,KACvCrB,sBACF+B,MAAK,SAAAC,GAAS,OAAIJ,EAAKC,WAAWG,MAEpC,IAAMP,IAAsBK,EAA8B,iBAI1D,IAAM6C,EAAgB,CAClBzB,QAASA,QAAQf,EAAOrF,EAAIqG,GAC5BhB,MAAAA,GAIEyC,EAAgBnD,EAChBG,EAAKiD,MAAM,MAAMvE,QAEdN,qBAAqB4B,EAAK,QAAOA,EAAKiD,MAAM,GAErDH,EAAWE,EAAcE,eAAiBH,qCArBhB7H,EAAGwE,+BAwBjC,OAAOoD,GAGEK,cAAgB,SAACjI,GAC1B,IAAM4H,EAAaD,eAAe3H,GAIlC,OAHsBsE,OAAOC,KAAKqD,GAAYpE,OAAS,EAC1C,CAAExD,GAAAA,EAAI4H,WAAAA,EAAY/G,KAAMjB,WAAWsI,aAElBC,GAGrBC,QAAU,SACnBpI,EACAiH,YAAAA,IAAAA,GAAoB,GAEpB,IAAMoB,EAAoB,GAW1B,OAViBtB,uBAAuB/G,EAAIiH,GAEnCQ,SAAQ,SAAAH,GACb,IAAMgB,EAAaL,cAAcX,GAE7BgB,GACAD,EAAQlC,KAAKmC,MAIdD,GC/FEE,KAAO,SAClBC,EACAC,GAEA,IAAMC,EAAYD,IAClB,OAAO,SAASE,IACd,IAAMC,EAAQC,YAAYC,MACtBC,EAAO,KACX,GACEA,EAAOL,EAAUC,aACVE,YAAYC,MAAQF,EAAQJ,IAAcO,EAAKC,MAEpDD,EAAKC,MACTC,WAAWN,KCrBFO,YAAc,gBAAGlJ,IAAAA,GAAImJ,IAAAA,MAAO7H,IAAAA,KAC/BoF,EAAmC,GAEnC0C,EAAaD,EAAMpB,MAAM,GACzBsB,UAAgCF,EAAM,iBAG5C,IAAInJ,EAAGqJ,GAAP,CAEA,IAAMC,EAPwB,CAAC,UAAW,UAOLrE,MAAK,SAAAsE,GAAI,OAC1CC,OAAOJ,GAAY7I,SAASgJ,MAE1B/H,OACAxB,EA4DN0G,EAAQ+C,KAAOL,EAAW7I,SAAS,QACnCmG,EAAQgD,QAAUN,EAAW7I,SAAS,WAEtC+I,EAAOK,iBAAiBR,EAAM,IA7Dd,SAACvC,GACb,GAAIwC,EAAW5F,OAAS,EAAG,CACvB,GACIoD,aAAiBgD,eACjB,QAAQC,KAAKL,OAAOJ,IACtB,CACE,IAAMU,EAAgC,GAQtC,GAPAV,EAAW3B,SAAQ,SAAAsC,GAEVC,MAAMD,IACPD,EAAoB3D,KAAK8D,OAAOF,QAInCD,EAAoBvJ,SAASqG,EAAMsD,SAAU,OAMtD,GAFId,EAAW7I,SAAS,YAAYqG,EAAMuD,iBACtCf,EAAW7I,SAAS,SAASqG,EAAMwD,kBACnChB,EAAW7I,SAAS,SAChBqG,EAAM0C,SAAWtJ,EAAI,OAG7B,GAAIoJ,EAAW7I,SAAS,WAAY,CAChC,GAAIP,EAAGqK,SAASzD,EAAM0C,QAAiB,OACvC,GAAItJ,EAAGsK,YAAc,GAAKtK,EAAGuK,aAAe,EAAG,QAG/CnB,EAAW7I,SAAS,UAAY6I,EAAW7I,SAAS,UACf,UAAhCqG,EAAwB4D,KACzBlJ,EAAK8E,QAAQQ,IAKhBwC,EAAW7I,SAAS,SAChBqG,EAAqB6D,SACzBrB,EAAW7I,SAAS,QAAWqG,EAAqB8D,QACpDtB,EAAW7I,SAAS,UAChBqG,EAAqB+D,UACzBvB,EAAW7I,SAAS,SACjB,WAAYqG,GACqB,IAAhCA,EAAqBgE,QACzBxB,EAAW7I,SAAS,WACjB,WAAYqG,GACqB,IAAhCA,EAAqBgE,QACzBxB,EAAW7I,SAAS,UACjB,WAAYqG,GACqB,IAAhCA,EAAqBgE,SAE1BtJ,EAAK8E,QAAQQ,QAGjBtF,EAAK8E,QAAQQ,KAOsBF,GAG3C1G,EAAGqJ,IAAyB,IC5EnBzB,WAAyB,CAGlCiD,GAAI3B,aAGK4B,gBAAkB,SAC3BC,EACAnD,GAEAA,EAAWmD,EAAM5B,MAAM,GAAG6B,eAAeD,ICVvCE,OAAS,SACX5C,EACAT,GAEA,IAAMsD,EAAsB5G,OAAOC,KAAKqD,GAGxCW,KAF0B,+BAEF,aAAA,0BAAA,+CAAA,6BAAA,OAAA4C,kCACD9C,GAAO,OAAA,iBAAA9F,UAAA,MAAX,IAAJwD,WACElF,OAASjB,WAAWwL,MAAI7I,SAAA,MAAA,+BAAA,OAGjC,OAFM8I,EAAWtF,EAAKlF,OAASjB,WAAWsI,UAC5BnC,EAAKlF,KAAOjB,WAAWwL,WAAK7I,UACrC,OAAA,GAEA8I,GAAQ9I,UAAA,MAAA,+BAAA,QAAA+I,MAEgChH,OAAOiH,QAChDxF,EAAK6B,YACR,QAAA,kBAAArF,UAAA,MAGO,GALmBsF,GAE1B2D,WACSC,GAHE3D,QAG+B4D,MACnCzI,uBACF,GAGGiI,EAAoB3K,SACjBkL,EAAiBT,gBACpBzI,UAAA,MAAA,+BAAA,QAGL,YAHKA,WAGA,QAGD8I,IACMM,EAAiB,CACnB3L,GAAI+F,EAAK/F,GACTmJ,MAAOrB,EAAc4D,MAAMzI,uBAC3B3B,KAAMuG,EACN9B,KAAAA,GAGJ+E,gBAAgBa,EAAgB/D,UAGzB7B,EAAK6B,WAAWE,IAC1B,QAAAwD,IAAA/I,UAAA,MAAA,QAAAA,SAAA,MAAA,QAAA,UAAA,yBArCbgG,ICPiBqD,qBAGjB,aAFO1J,aAAoB,GAGvBA,KAAKmG,QAAU,GAClB,kBAsBA,OAtBAwD,EAEMC,MAAA,SAAM9L,GACT,IAAM+L,EACF/L,aAAcoH,YACRpH,EACA8C,SAASkJ,cAA2BhM,IAAO8C,SAASC,KAM9D,OAJAb,KAAKmG,QAAUD,QAAQ2D,GACvB7J,KAAK+I,SACLc,EAAkB,UAAI7J,KAEfA,MAGX2J,EAKOZ,OAAA,WACHA,OAAO/I,KAAKmG,QAAST,kBAIhBrC,cAAgB,SAAC+B,GAAgB,OAC1C,IAAIsE,WAAYE,MAAMxE,IC9Bb2E,KAAO,SAAC3E,YAAAA,IAAAA,EAAkCxE,UACnD,IAAMc,EAAS,IAAIgI,UACb5E,EAAcM,aAAmB4E,SAAW5E,EAAQvE,KAAOuE,EAEjE1D,EAAOkI,MAAM9E,ICNjB,SAAgBmF,6CAIZ,IAAIC,EAAWC,QAAQC,UAAU9G,aAE7B+G,EAAUzJ,SAAS0J,cAAc,OAErCH,QAAQC,UAAU9G,aAAe,SAAyBV,EAAMO,GAC5D,IAAKP,EAAKvE,SAAS,KACf,OAAO6L,EAASK,KAAKvK,KAAM4C,EAAMO,GAGrCkH,EAAQ7H,mBAAqBI,OAASO,cAEtC,IAAIR,EAAQ0H,EAAQG,kBAAoBC,iBAAiB7H,GAExDyH,EAAQG,kBAAoBE,oBAAoB/H,GAEjD3C,KAAK2K,iBAAiBhI,ICnB9B/B,SAAS6G,iBAAiB,oBAAoB,WAC1CwC,6CACAF,OAEAnJ,SAAS0E,iBAAiB,aAAaC,SAAQ,SAAAzH,GAC3CA,EAAG8M,gBAAgB"}