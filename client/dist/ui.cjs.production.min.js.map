{"version":3,"file":"ui.cjs.production.min.js","sources":["../src/@types/core.ts","../src/utils/error.ts","../src/utils/data.ts","../src/server/connection.ts","../src/engine/template.ts","../src/engine/dom.ts","../src/engine/compute.ts","../src/core/directives.ts","../src/core/directives/on.ts","../src/core/component.ts","../src/engine/compile.ts","../src/engine/render.ts","../src/utils/lazy.ts","../src/index.ts","../src/utils/reset.ts","../src/core/index.ts"],"sourcesContent":["export type Directives = Record<string, (props: DirectiveProps) => void>;\n\nexport interface DirectiveProps {\n    el: HTMLElement;\n    parts: string[];\n    data: DirectiveData;\n    node?: UINode;\n}\n\nexport type KeyedEvent = KeyboardEvent | MouseEvent | TouchEvent;\n\nexport interface DirectiveData {\n    compute: (event?: Event) => any;\n    value: string;\n}\n\nexport interface UINode {\n    directives: Record<string, DirectiveData>;\n    el: HTMLElement;\n    type: UINodeType;\n}\n\nexport enum UINodeType {\n    NULL = -1,\n    STATIC = 0,\n    DYNAMIC = 1\n}\n\nexport interface LeafUIConfig {\n    el: HTMLElement;\n    data: Record<string, any>;\n    methods: string[];\n    id: string;\n    path: string;\n    requestMethod: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD';\n    component: string;\n}\n","export const error = (\n    err: string,\n    expression?: string,\n    el?: HTMLElement\n): void => {\n    let message = `LeafUI Error: \"${err}\"`;\n    if (expression) message += `\\n\\nExpression: \"${expression}\"`;\n    if (el) message += `\\nElement:`;\n    console.warn(message, el);\n};\n","import Component from './../core/component';\nimport { LeafUIConfig } from './../@types/core';\n\nexport const eventDirectivePrefixRE = (): RegExp => /on|@/gim;\nexport const rawDirectiveSplitRE = (): RegExp => /:|\\./gim;\n\nexport const hasDirectiveRE = (): RegExp => {\n    return new RegExp(\n        `(ui-|${Object.keys(DIRECTIVE_SHORTHANDS).join('|')})\\\\w+`,\n        'gim'\n    );\n};\n\nexport const expressionPropRE = (prop: string): RegExp => {\n    // Utilizes \\b (word boundary) for prop differentiation.\n    // Fails when next character is a \\w (Word).\n    return new RegExp(`\\\\b${prop}\\\\b`, 'gim');\n};\n\nexport enum DIRECTIVE_SHORTHANDS {\n    '@' = 'on',\n    ':' = 'bind'\n}\n\nexport function arraysMatch(a: any[], b: any[]) {\n    return (\n        Array.isArray(a) &&\n        Array.isArray(b) &&\n        a.length === b.length &&\n        a.every((val, index) => val === b[index])\n    );\n}\n\ndeclare global {\n    interface Window {\n        leafUI: Component;\n        _leafUIConfig: LeafUIConfig;\n    }\n\n    interface HTMLElement {\n        component: Component;\n        compile: () => void;\n    }\n}\n\nwindow.leafUI = window.leafUI || {};\n","import Dom from './../engine/dom';\nimport { error } from './../utils/error';\n\nexport default class Connection {\n    protected static headers: Record<string, string>;\n\n    public static connect(\n        type: string,\n        uiData: Record<string, any>,\n        dom: typeof Dom\n    ) {\n        const payload = {\n            type,\n            payload: {\n                params: [],\n                method: uiData.method,\n                methodArgs: uiData.methodArgs,\n                component: uiData.config.component,\n                data: uiData.config.data\n            }\n        };\n\n        return fetch(\n            `${window.location.href}?_leaf_ui_config=${JSON.stringify(\n                payload\n            )}`,\n            {\n                method: uiData.config.method,\n                // This enables \"cookies\".\n                credentials: 'same-origin',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Accept: 'text/html, application/xhtml+xml',\n                    'X-Leaf-UI': 'true',\n\n                    // set Custom Headers\n                    ...this.headers,\n\n                    // We'll set this explicitly to mitigate potential interference from ad-blockers/etc.\n                    Referer: window.location.href\n                }\n            }\n        ).then(async response => {\n            if (response.ok) {\n                response.text().then(response => {\n                    const data = JSON.parse(response);\n                    window._leafUIConfig.data = data.state;\n                    dom.diff(data.html, document.body!);\n                });\n            } else {\n                error(await response.text().then(res => res));\n            }\n        });\n    }\n\n    //    public sendMessage(message) {\n    //        // Forward the query string for the ajax requests.\n\n    //            .then(response => {\n    //                if (response.ok) {\n    //                    response.text().then(response => {\n    //                        if (this.isOutputFromDump(response)) {\n    //                            this.onError(message);\n    //                            this.showHtmlModal(response);\n    //                        } else {\n    //                            this.onMessage(\n    //                                message,\n    //                                JSON.parse(response)\n    //                            );\n    //                        }\n    //                    });\n    //                } else {\n    //                    if (\n    //                        this.onError(\n    //                            message,\n    //                            response.status,\n    //                            response\n    //                        ) === false\n    //                    )\n    //                        return;\n\n    //                    if (response.status === 419) {\n    //                        if (store.sessionHasExpired) return;\n\n    //                        store.sessionHasExpired = true;\n\n    //                        this.showExpiredMessage(\n    //                            response,\n    //                            message\n    //                        );\n    //                    } else {\n    //                        response.text().then(response => {\n    //                            this.showHtmlModal(response);\n    //                        });\n    //                    }\n    //                }\n    //            })\n    //            .catch(() => {\n    //                this.onError(message);\n    //            });\n    //    }\n}\n","export default class template {\n    static findAll(el: HTMLElement): HTMLElement[] {\n        const elementsWithData = [];\n\n        for (let i = 0; i < el.children.length; i++) {\n            const child = el.children[i];\n            const html = child.innerHTML;\n\n            (child as HTMLElement).compile = () => template.compile(child as HTMLElement);\n\n            if (/{{\\s*\\$(\\w+)\\s*}}/g.test(html)) {\n                elementsWithData.push(child as HTMLElement);\n            }\n        }\n\n        return elementsWithData;\n    }\n\n    static compile(element: HTMLElement): HTMLElement {\n        const varToUpdate = element.textContent!.match(/{{\\s*\\$(\\w+)\\s*}}/g);\n        element.textContent =\n            window._leafUIConfig?.data?.[\n                varToUpdate?.[0]?.replace(/{{\\s*\\$(\\w+)\\s*}}/g, '$1') ?? ''\n            ];\n        element.textContent = element.textContent!.replace(/{{\\s*\\$(\\w+)\\s*\\|\\s*(\\w+)\\s*}}/g, '${$2($1)}')!;\n\n        return element;\n    }\n}\n","import { initComponent } from './../core/component';\nimport { DIRECTIVE_SHORTHANDS, arraysMatch } from './../utils/data';\nimport template from './template';\n\nexport default class Dom {\n    static diff(newNode: string, oldNode: HTMLElement): void {\n        const newDomBody = Dom.getBodyWithoutScripts(newNode);\n        template.findAll(newDomBody).map(el => el.compile());\n        const diff = Dom.compareNodesAndReturnChanges(newDomBody, oldNode);\n\n        for (let i = 0; i < diff.length; i++) {\n            if (\n                diff[i] instanceof HTMLScriptElement ||\n                diff[i].oldNode.children.length !== 0\n            ) {\n                continue;\n            }\n\n            if (\n                arraysMatch(\n                    Object.keys(diff[i].oldNode.attributes),\n                    Object.keys(diff[i].newNode.attributes)\n                ) &&\n                arraysMatch(\n                    Object.values(diff[i].oldNode.attributes),\n                    Object.values(diff[i].newNode.attributes)\n                ) &&\n                diff[i].oldNode.innerHTML === diff[i].newNode.innerHTML\n            ) {\n                continue;\n            }\n\n            const hasDirectivePrefix = Object.values(diff[i].oldNode.attributes)\n                .map(attr => attr.name.startsWith('ui-'))\n                .includes(true);\n            const hasDirectiveShorthandPrefix = Object.keys(\n                DIRECTIVE_SHORTHANDS\n            ).some(shorthand =>\n                Object.values(diff[i].oldNode.attributes)\n                    .map(attr => attr.name.startsWith(shorthand))\n                    .includes(true)\n            );\n\n            if (hasDirectivePrefix || hasDirectiveShorthandPrefix) {\n                diff[i].oldNode.innerHTML = diff[i].newNode.innerHTML;\n\n                for (let j = 0; j < diff[i].newNode.attributes.length; j++) {\n                    const attr = diff[i].newNode.attributes[j];\n\n                    if (\n                        attr.name.startsWith('ui-') ||\n                        Object.keys(DIRECTIVE_SHORTHANDS).some(shorthand =>\n                            Object.values(diff[i].oldNode.attributes)\n                                .map(attr => attr.name.startsWith(shorthand))\n                                .includes(true)\n                        )\n                    ) {\n                        if (\n                            diff[i].oldNode.getAttribute(attr.name) !==\n                            attr.value\n                        ) {\n                            diff[i].oldNode.replaceWith(diff[i].newNode);\n                            initComponent(diff[i].newNode);\n                        }\n\n                        continue;\n                    }\n\n                    diff[i].oldNode.setAttribute(attr.name, attr.value);\n                }\n\n                continue;\n            }\n\n            diff[i].oldNode.replaceWith(diff[i].newNode);\n        }\n    }\n\n    static getBodyWithoutScripts(html: string): HTMLElement {\n        const parser = new DOMParser();\n        const dom = parser.parseFromString(html, 'text/html');\n        const scripts = dom.getElementsByTagName('script');\n\n        for (let i = 0; i < scripts.length; i++) {\n            scripts[i].remove();\n        }\n\n        return dom.body;\n    }\n\n    static flattenDomIntoArray(node: HTMLElement): HTMLCollection {\n        return node.getElementsByTagName('*');\n    }\n\n    static compareNodesAndReturnChanges(\n        newNode: HTMLElement,\n        oldNode: HTMLElement\n    ): Record<string, Element>[] {\n        const newNodes = Dom.flattenDomIntoArray(newNode);\n        const oldNodes = Dom.flattenDomIntoArray(oldNode);\n        const changes = [];\n\n        for (let i = 0; i < newNodes.length; i++) {\n            if (newNodes[i] !== oldNodes[i]) {\n                changes.push({\n                    oldNode: oldNodes[i],\n                    newNode: newNodes[i]\n                });\n            }\n        }\n\n        return changes;\n    }\n}\n","import { error } from '../utils/error';\nimport Connection from './../server/connection';\nimport Dom from './dom';\n\nexport const compute = (\n    expression: string,\n    el?: HTMLElement,\n    refs: Record<string, HTMLElement> = {}\n): ((event?: Event) => any) => {\n    const specialPropertiesNames = ['$el', '$emit', '$event', '$refs', '$dom'];\n\n    // This \"revives\" a function from a string, only using the new Function syntax once during compilation.\n    // This is because raw function is ~50,000x faster than new Function\n    const computeFunction = new Function(\n        `return (${specialPropertiesNames.join(',')}) => {\n            const method = ${JSON.stringify(expression)}.split('(')[0];\n            const methodArgs = ${JSON.stringify(expression)}.substring(${JSON.stringify(expression)}.indexOf('(') + 1, ${JSON.stringify(expression)}.lastIndexOf(')'));\n\n            if (!window._leafUIConfig.methods.includes(method)) {\n                return error(new ReferenceError(method + ' is not defined'), method, $el);\n            }\n\n            (${\n                Connection.connect\n            })('callMethod', { method, methodArgs, config: window._leafUIConfig }, $dom);\n        }`\n    )();\n\n    const emit = (\n        name: string,\n        options?: CustomEventInit,\n        dispatchGlobal = true\n    ) => {\n        const event = new CustomEvent(name, options);\n        const target = dispatchGlobal ? window : el || window;\n\n        target.dispatchEvent(event);\n    };\n\n    return (event?: Event) => {\n        try {\n            return computeFunction(el, emit, event, refs, Dom);\n        } catch (err) {\n            error(err as string, expression, el);\n        }\n    };\n};\n","import { DirectiveProps, Directives } from './../@types/core';\n// import { bindDirective } from './directives/bind';\n// import { modelDirective } from './directives/model';\nimport { onDirective } from './directives/on';\n\nexport const directives: Directives = {\n    // BIND: bindDirective,\n    // MODEL: modelDirective,\n    ON: onDirective,\n};\n\nexport const renderDirective = (\n    props: DirectiveProps,\n    directives: Directives\n): void => {\n    directives[props.parts[0].toUpperCase()](props);\n};\n","import { DirectiveProps, KeyedEvent } from './../../@types/core';\n\nexport const onDirective = ({ el, parts, data }: DirectiveProps): void => {\n    const options: Record<string, boolean> = {};\n    const globalScopeEventProps = ['outside', 'global'];\n    const eventProps = parts.slice(2);\n    const EVENT_REGISTERED_FLAG = `__on_${parts[1]}_registered`;\n\n    // @ts-expect-error: We're adding a custom property to the element\n    if (el[EVENT_REGISTERED_FLAG]) return;\n\n    const target = globalScopeEventProps.some(prop =>\n        String(eventProps).includes(prop)\n    )\n        ? window\n        : el;\n\n    const handler = (event: Event) => {        \n        if (eventProps.length > 0) {\n            if (\n                event instanceof KeyboardEvent &&\n                /\\d/gim.test(String(eventProps))\n            ) {\n                const whitelistedKeycodes: number[] = [];\n                eventProps.forEach(eventProp => {\n                    // @ts-expect-error: eventProp can be a string, but isNaN only accepts number\n                    if (!isNaN(eventProp)) {\n                        whitelistedKeycodes.push(Number(eventProp));\n                    }\n                });\n\n                if (!whitelistedKeycodes.includes(event.keyCode)) return;\n            }\n\n            // Parse event modifiers based on directive prop\n            if (eventProps.includes('prevent')) event.preventDefault();\n            if (eventProps.includes('stop')) event.stopPropagation();\n            if (eventProps.includes('self')) {\n                if (event.target !== el) return;\n            }\n            /* istanbul ignore next */\n            if (eventProps.includes('outside')) {\n                if (el.contains(event.target as Node)) return;\n                if (el.offsetWidth < 1 && el.offsetHeight < 1) return;\n            }\n\n            if (eventProps.includes('enter') || eventProps.includes('meta')) {\n                if ((event as KeyboardEvent).key === 'Enter') {\n                    data.compute(event);\n                }\n            }\n\n            if (\n                (eventProps.includes('ctrl') &&\n                    (event as KeyedEvent).ctrlKey) ||\n                (eventProps.includes('alt') && (event as KeyedEvent).altKey) ||\n                (eventProps.includes('shift') &&\n                    (event as KeyedEvent).shiftKey) ||\n                (eventProps.includes('left') &&\n                    'button' in event &&\n                    (event as MouseEvent).button === 0) ||\n                (eventProps.includes('middle') &&\n                    'button' in event &&\n                    (event as MouseEvent).button === 1) ||\n                (eventProps.includes('right') &&\n                    'button' in event &&\n                    (event as MouseEvent).button === 2)\n            ) {\n                data.compute(event);\n            }\n        } else {\n            data.compute(event);\n        }\n    };\n\n    options.once = eventProps.includes('once');\n    options.passive = eventProps.includes('passive');\n\n    target.addEventListener(parts[1], handler, options);\n\n    // @ts-expect-error: We're adding a custom property to the element\n    el[EVENT_REGISTERED_FLAG] = true;\n};\n","import { UINode } from './../@types/core';\nimport { compile } from '../engine/compile';\nimport render from '../engine/render';\nimport { directives } from './directives';\nimport template from './../engine/template';\n\nexport default class Component {\n    public uiNodes: UINode[] = [];\n\n    constructor() {\n        this.uiNodes = [];\n    }\n\n    public mount(el: HTMLElement | string) {\n        const rootEl =\n            el instanceof HTMLElement\n                ? el\n                : document.querySelector<HTMLElement>(el) || document.body;\n\n        template.findAll(rootEl).map(el => el.compile());\n        this.uiNodes = compile(rootEl);\n\n        this.render();\n\n        rootEl['component'] = this;\n\n        return this;\n    }\n\n    /**\n     * Force renders the DOM based on props\n     * @param {string[]=} props - Array of root level properties in state\n     * @returns {undefined}\n     */\n    public render() {\n        render(this.uiNodes, directives);\n    }\n}\n\nexport const initComponent = (element: Element) =>\n    new Component().mount(element as HTMLElement);\n","import { DirectiveData, UINode, UINodeType } from '../@types/core';\nimport { compute } from './compute';\nimport { DIRECTIVE_SHORTHANDS } from '../utils/data';\n\nexport const flattenElementChildren = (\n    rootElement: HTMLElement,\n    ignoreRootElement = false\n): HTMLElement[] => {\n    const collection: HTMLElement[] = [];\n\n    if (!ignoreRootElement) {\n        collection.push(rootElement);\n    }\n\n    for (const childElement of rootElement.children as any) {\n        if (childElement instanceof HTMLElement) {\n            collection.push(\n                ...flattenElementChildren(\n                    childElement,\n                    childElement.attributes.length === 0\n                )\n            );\n        }\n    }\n\n    return collection;\n};\n\nexport const collectRefs = (\n    element: HTMLElement | Document = document\n): Record<string, HTMLElement> => {\n    const refDirective = 'ui-ref';\n    const refElements: NodeListOf<HTMLElement> = element.querySelectorAll(\n        `[${refDirective}]`\n    );\n    const refs: Record<string, HTMLElement> = {};\n\n    refElements.forEach(refElement => {\n        const name = refElement.getAttribute(refDirective);\n\n        if (name) {\n            refs[name] = refElement;\n        }\n    });\n\n    return refs;\n};\n\nexport const initDirectives = (\n    el: HTMLElement\n): Record<string, DirectiveData> => {\n    const directives: Record<string, DirectiveData> = {};\n    const refs = collectRefs();\n\n    // @ts-ignore\n    for (const { name, value } of el.attributes) {\n        const hasDirectivePrefix = name.startsWith('ui-');\n        const hasDirectiveShorthandPrefix = Object.keys(\n            DIRECTIVE_SHORTHANDS\n        ).some(shorthand => name.startsWith(shorthand));\n\n        if (!(hasDirectivePrefix || hasDirectiveShorthandPrefix)) {\n            continue;\n        }\n\n        const directiveData = {\n            compute: compute(value, el, refs),\n            value\n        };\n\n        // Handle normal and shorthand directives=\n        const directiveName = hasDirectivePrefix\n            ? name.slice('ui-'.length)\n            : // @ts-ignore\n              `${DIRECTIVE_SHORTHANDS[name[0]]}:${name.slice(1)}`;\n\n        directives[directiveName.toLowerCase()] = directiveData;\n    }\n\n    return directives;\n};\n\nexport const createASTNode = (el: HTMLElement): UINode | undefined => {\n    const directives = initDirectives(el);\n    const hasDirectives = Object.keys(directives).length > 0;\n    const node = { el, directives, type: UINodeType.STATIC };\n\n    return hasDirectives ? node : undefined;\n};\n\nexport const compile = (\n    el: HTMLElement,\n    ignoreRootElement = false\n): UINode[] => {\n    const uiNodes: UINode[] = [];\n    const elements = flattenElementChildren(el, ignoreRootElement);\n\n    elements.forEach(element => {\n        const newASTNode = createASTNode(element);\n\n        if (newASTNode) {\n            uiNodes.push(newASTNode);\n        }\n    });\n\n    return uiNodes;\n};\n","import lazy from './../utils/lazy';\nimport { renderDirective } from './../core/directives';\nimport { rawDirectiveSplitRE } from './../utils/data';\nimport { Directives, UINode, UINodeType } from './../@types/core';\n\nconst render = (\n    uiNodes: UINode[],\n    directives: Directives,\n): void => {\n    const legalDirectiveNames = Object.keys(directives);\n    const LAZY_MODE_TIMEOUT = 25;\n\n    lazy(LAZY_MODE_TIMEOUT, function*() {\n        for (const node of uiNodes) {\n            if (node.type === UINodeType.NULL) continue;\n            const isStatic = node.type === UINodeType.STATIC;\n            if (isStatic) node.type = UINodeType.NULL;\n            yield;\n\n            if (!isStatic) continue;\n\n            for (const [directiveName, directiveData] of Object.entries(\n                node.directives\n            )) {\n                const rawDirectiveName = directiveName.split(\n                    rawDirectiveSplitRE()\n                )[0];\n\n                if (\n                    !legalDirectiveNames.includes(\n                        rawDirectiveName.toUpperCase()\n                    )\n                )\n                    continue;\n                yield;\n\n                // If affected, then push to render queue\n                if (isStatic) {\n                    const directiveProps = {\n                        el: node.el,\n                        parts: directiveName.split(rawDirectiveSplitRE()),\n                        data: directiveData,\n                        node,\n                    };\n\n                    renderDirective(directiveProps, directives);\n\n                    // [TODO] Remove this after testing\n                    delete node.directives[directiveName];\n                }\n            }\n        }\n    })();\n};\n\nexport default render;\n","/**\n * @author Aiden Bai <hello@aidenybai.com>\n * @package lucia\n */\n// Lazy allows us to delay render calls if the main thread is blocked\n// This is kind of like time slicing in React but less advanced\n// It's a generator function that yields after a certain amount of time\n// This allows the browser to render other things while the generator is running\n// It's a bit like a setTimeout but it's more accurate\n\nexport const lazy = (\n  threshold: number,\n  generatorFunction: () => Generator<undefined, void, unknown>,\n): (() => void) => {\n  const generator = generatorFunction();\n  return function next() {\n    const start = performance.now();\n    let task = null;\n    do {\n      task = generator.next();\n    } while (performance.now() - start < threshold && !task.done);\n\n    if (task.done) return;\n    setTimeout(next);\n  };\n};\n\nexport default lazy;\n","import { init } from './core';\nimport { monkeyPatchDomSetAttributeToAllowAtSymbols } from './utils/reset';\nexport * from './@types';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    monkeyPatchDomSetAttributeToAllowAtSymbols();\n    init();\n\n    document.querySelectorAll('[ui-lazy]').forEach(el => {\n        el.removeAttribute('ui-lazy');\n    });\n});\n","/**\n * @author Caleb Porzio\n * @package livewire/livewire\n */\nexport function monkeyPatchDomSetAttributeToAllowAtSymbols() {\n    // Because morphdom may add attributes to elements containing \"@\" symbols\n    // like in the case of an Alpine `@click` directive, we have to patch\n    // the standard Element.setAttribute method to allow this to work.\n    let original = Element.prototype.setAttribute;\n\n    let hostDiv = document.createElement('div');\n\n    Element.prototype.setAttribute = function newSetAttribute(name, value) {\n        if (!name.includes('@')) {\n            return original.call(this, name, value);\n        }\n\n        hostDiv.innerHTML = `<span ${name}=\"${value}\"></span>`;\n\n        let attr = (hostDiv.firstElementChild)!.getAttributeNode(name)!;\n\n        (hostDiv.firstElementChild)!.removeAttributeNode(attr);\n\n        this.setAttributeNode(attr);\n    };\n}\n","import Component from './component';\n\n/**\n * Initialize Your Leaf UI root component\n * @param {HTMLElement|Document} element - Root element to find uninitialized components\n */\nexport const init = (element: HTMLElement | Document = document): void => {\n    const leafUI = new Component();\n    const rootElement = element instanceof Document ? element.body : element;\n\n    leafUI.mount(rootElement);\n};\n"],"names":["UINodeType","DIRECTIVE_SHORTHANDS","error","err","expression","el","message","console","warn","Connection","connect","type","uiData","dom","fetch","window","location","href","JSON","stringify","payload","params","method","methodArgs","component","config","data","credentials","headers","Content-Type","Accept","X-Leaf-UI","this","Referer","then","response","ok","_context","text","parse","_leafUIConfig","state","diff","html","document","body","res","arraysMatch","a","b","Array","isArray","length","every","val","index","leafUI","template","findAll","elementsWithData","child","children","i","innerHTML","compile","test","push","_loop","element","varToUpdate","textContent","match","_window$_leafUIConfig","_window$_leafUIConfig2","_varToUpdate$","replace","Dom","newNode","oldNode","newDomBody","getBodyWithoutScripts","map","compareNodesAndReturnChanges","HTMLScriptElement","Object","keys","attributes","values","hasDirectivePrefix","attr","name","startsWith","includes","hasDirectiveShorthandPrefix","some","shorthand","j","getAttribute","value","replaceWith","initComponent","setAttribute","DOMParser","parseFromString","scripts","getElementsByTagName","remove","flattenDomIntoArray","node","newNodes","oldNodes","changes","compute","refs","computeFunction","Function","join","emit","options","dispatchGlobal","event","CustomEvent","dispatchEvent","directives","ON","parts","eventProps","slice","EVENT_REGISTERED_FLAG","target","prop","String","once","passive","addEventListener","KeyboardEvent","whitelistedKeycodes","forEach","eventProp","isNaN","Number","keyCode","preventDefault","stopPropagation","contains","offsetWidth","offsetHeight","key","ctrlKey","altKey","shiftKey","button","renderDirective","props","toUpperCase","Component","uiNodes","_proto","mount","rootEl","HTMLElement","querySelector","ignoreRootElement","flattenElementChildren","rootElement","collection","childElement","newASTNode","refElements","querySelectorAll","refElement","collectRefs","directiveData","directiveName","toLowerCase","initDirectives","STATIC","undefined","createASTNode","render","generator","legalDirectiveNames","_iterator","NULL","isStatic","_i","entries","_Object$entries$_i","rawDirectiveName","split","directiveProps","generatorFunction","next","start","performance","now","task","done","setTimeout","original","hostDiv","Element","prototype","createElement","call","firstElementChild","getAttributeNode","removeAttributeNode","setAttributeNode","Document","init","removeAttribute"],"mappings":"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"}