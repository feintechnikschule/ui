{"version":3,"file":"ui.cjs.production.min.js","sources":["../src/@types/core.ts","../src/utils/error.ts","../src/utils/data.ts","../src/server/connection.ts","../src/engine/dom.ts","../src/engine/compute.ts","../src/core/directives.ts","../src/core/directives/on.ts","../src/core/component.ts","../src/engine/compile.ts","../src/engine/render.ts","../src/utils/lazy.ts","../src/index.ts","../src/utils/reset.ts","../src/core/index.ts"],"sourcesContent":["export type Directives = Record<string, (props: DirectiveProps) => void>;\n\nexport interface DirectiveProps {\n    el: HTMLElement;\n    parts: string[];\n    data: DirectiveData;\n    node?: UINode;\n}\n\nexport type KeyedEvent = KeyboardEvent | MouseEvent | TouchEvent;\n\nexport interface DirectiveData {\n    compute: (event?: Event) => any;\n    value: string;\n}\n\nexport interface UINode {\n    directives: Record<string, DirectiveData>;\n    el: HTMLElement;\n    type: UINodeType;\n}\n\nexport enum UINodeType {\n    NULL = -1,\n    STATIC = 0,\n    DYNAMIC = 1\n}\n\nexport interface LeafUIConfig {\n    el: HTMLElement;\n    data: Record<string, any>;\n    methods: string[];\n    id: string;\n    path: string;\n    requestMethod: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD';\n    component: string;\n}\n","export const error = (\n    err: string,\n    expression?: string,\n    el?: HTMLElement\n): void => {\n    let message = `LeafUI Error: \"${err}\"`;\n    if (expression) message += `\\n\\nExpression: \"${expression}\"`;\n    if (el) message += `\\nElement:`;\n    console.warn(message, el);\n};\n","import Component from './../core/component';\nimport { LeafUIConfig } from './../@types/core';\n\nexport const eventDirectivePrefixRE = (): RegExp => /on|@/gim;\nexport const rawDirectiveSplitRE = (): RegExp => /:|\\./gim;\n\nexport const hasDirectiveRE = (): RegExp => {\n    return new RegExp(\n        `(ui-|${Object.keys(DIRECTIVE_SHORTHANDS).join('|')})\\\\w+`,\n        'gim'\n    );\n};\n\nexport const expressionPropRE = (prop: string): RegExp => {\n    // Utilizes \\b (word boundary) for prop differentiation.\n    // Fails when next character is a \\w (Word).\n    return new RegExp(`\\\\b${prop}\\\\b`, 'gim');\n};\n\nexport enum DIRECTIVE_SHORTHANDS {\n    '@' = 'on',\n    ':' = 'bind'\n}\n\nexport function arraysMatch(a: any[], b: any[]) {\n    return (\n        Array.isArray(a) &&\n        Array.isArray(b) &&\n        a.length === b.length &&\n        a.every((val, index) => val === b[index])\n    );\n}\n\ndeclare global {\n    interface Window {\n        leafUI: {\n            rootEl?: HTMLElement;\n            component: Component;\n        };\n        _leafUIConfig: LeafUIConfig;\n    }\n\n    interface HTMLElement {\n        component: Component;\n        compile: () => void;\n    }\n}\n\nwindow.leafUI = window.leafUI || {};\n","import Dom from './../engine/dom';\nimport { error } from './../utils/error';\n\nexport default class Connection {\n    protected static headers: Record<string, string>;\n\n    public static connect(\n        type: string,\n        uiData: Record<string, any>,\n        dom: typeof Dom\n    ) {\n        const payload = {\n            type,\n            payload: {\n                params: [],\n                method: uiData.method,\n                methodArgs: uiData.methodArgs,\n                component: uiData.config.component,\n                data: uiData.config.data\n            }\n        };\n\n        return fetch(\n            `${window.location.href}?_leaf_ui_config=${JSON.stringify(\n                payload\n            )}`,\n            {\n                method: uiData.config.method,\n                // This enables \"cookies\".\n                credentials: 'same-origin',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Accept: 'text/html, application/xhtml+xml',\n                    'X-Leaf-UI': 'true',\n\n                    // set Custom Headers\n                    ...this.headers,\n\n                    // We'll set this explicitly to mitigate potential interference from ad-blockers/etc.\n                    Referer: window.location.href\n                }\n            }\n        ).then(async response => {\n            if (response.ok) {\n                response.text().then(response => {\n                    const data = JSON.parse(response);\n                    window._leafUIConfig.data = data.state;\n                    dom.diff(data.html, document.body!);\n                });\n            } else {\n                error(await response.text().then(res => res));\n            }\n        });\n    }\n\n    //    public sendMessage(message) {\n    //        // Forward the query string for the ajax requests.\n\n    //            .then(response => {\n    //                if (response.ok) {\n    //                    response.text().then(response => {\n    //                        if (this.isOutputFromDump(response)) {\n    //                            this.onError(message);\n    //                            this.showHtmlModal(response);\n    //                        } else {\n    //                            this.onMessage(\n    //                                message,\n    //                                JSON.parse(response)\n    //                            );\n    //                        }\n    //                    });\n    //                } else {\n    //                    if (\n    //                        this.onError(\n    //                            message,\n    //                            response.status,\n    //                            response\n    //                        ) === false\n    //                    )\n    //                        return;\n\n    //                    if (response.status === 419) {\n    //                        if (store.sessionHasExpired) return;\n\n    //                        store.sessionHasExpired = true;\n\n    //                        this.showExpiredMessage(\n    //                            response,\n    //                            message\n    //                        );\n    //                    } else {\n    //                        response.text().then(response => {\n    //                            this.showHtmlModal(response);\n    //                        });\n    //                    }\n    //                }\n    //            })\n    //            .catch(() => {\n    //                this.onError(message);\n    //            });\n    //    }\n}\n","import { initComponent } from './../core/component';\nimport { DIRECTIVE_SHORTHANDS, arraysMatch } from './../utils/data';\n\nexport default class Dom {\n    static diff(newNode: string, oldNode: HTMLElement): void {\n        Dom.diffElements(Dom.getBody(newNode, false), oldNode);\n    }\n\n    static diffElements(newNode: HTMLElement, oldNode: HTMLElement): void {\n        const newNodes = Array.prototype.slice.call(newNode.children);\n        const oldNodes = Array.prototype.slice.call(oldNode.children);\n\n        /**\n         * Get the type for a node\n         * @param  {Node}   node The node\n         * @return {String} The type\n         */\n        const getNodeType = (node: HTMLElement) => {\n            if (node.nodeType === 3) return 'text';\n            if (node.nodeType === 8) return 'comment';\n            return node.tagName.toLowerCase();\n        };\n\n        /**\n         * Get the content from a node\n         * @param  {Node}   node The node\n         * @return {String}      The type\n         */\n        const getNodeContent = (node: HTMLElement) => {\n            if (node.children && node.children.length > 0) return null;\n            return node.textContent;\n        };\n\n        // If extra elements in DOM, remove them\n        let count = oldNodes.length - newNodes.length;\n        if (count > 0) {\n            for (; count > 0; count--) {\n                oldNodes[oldNodes.length - count].parentNode.removeChild(\n                    oldNodes[oldNodes.length - count]\n                );\n            }\n        }\n\n        for (let index = 0; index < newNodes.length; index++) {\n            const node = newNodes[index];\n\n            console.log('diffing node', node);\n\n            if (!oldNodes[index]) {\n                const newNodeClone = node.cloneNode(true);\n                oldNode.appendChild(newNodeClone);\n                console.log('adding new UI node', newNodeClone);\n                initComponent(newNodeClone);\n                return;\n            }\n\n            if (node instanceof HTMLScriptElement && oldNodes[index] instanceof HTMLScriptElement) {\n                if (\n                    node.src !== oldNodes[index].src ||\n                    node.innerHTML !== oldNodes[index].innerHTML\n                ) {\n                    const newNodeClone = node.cloneNode(true);\n                    oldNodes[index].parentNode.replaceChild(\n                        newNodeClone,\n                        oldNodes[index]\n                    );\n                    console.log(\n                        'replacing script UI node',\n                        newNodeClone,\n                        oldNodes[index]\n                    );\n                }\n\n                continue;\n            }\n\n            if (\n                arraysMatch(\n                    Object.keys(oldNodes[index]?.attributes) ?? [],\n                    Object.keys(node.attributes)\n                ) &&\n                arraysMatch(\n                    Object.values(oldNodes[index]?.attributes) ?? [],\n                    Object.values(node.attributes)\n                ) &&\n                oldNodes[index]?.innerHTML === node.innerHTML\n            ) {\n                console.log('no changes to UI node', oldNodes[index]);\n                continue;\n            }\n\n            const hasDirectivePrefix = Object.values(oldNodes[index].attributes)\n                .map((attr: any) => attr.name.startsWith('ui-'))\n                .includes(true);\n            const hasDirectiveShorthandPrefix = Object.keys(\n                DIRECTIVE_SHORTHANDS\n            ).some(shorthand =>\n                Object.values(oldNodes[index].attributes)\n                    .map((attr: any) => attr.name.startsWith(shorthand))\n                    .includes(true)\n            );\n\n            if (hasDirectivePrefix || hasDirectiveShorthandPrefix) {\n                oldNodes[index].innerHTML = node.innerHTML;\n\n                for (let j = 0; j < node.attributes.length; j++) {\n                    const attr = node.attributes[j];\n\n                    if (\n                        attr.name.startsWith('ui-') ||\n                        Object.keys(DIRECTIVE_SHORTHANDS).some(shorthand =>\n                            Object.values(oldNodes[index].attributes)\n                                .map((attr: any) =>\n                                    attr.name.startsWith(shorthand)\n                                )\n                                .includes(true)\n                        )\n                    ) {\n                        if (\n                            oldNodes[index].getAttribute(attr.name) !==\n                            attr.value\n                        ) {\n                            const newNodeClone = node.cloneNode(true);\n                            oldNodes[index].parentNode.replaceChild(\n                                newNodeClone,\n                                oldNodes[index]\n                            );\n                            console.log('replacing directive UI node', newNodeClone, oldNodes[index]);\n                            initComponent(newNodeClone);\n                        }\n\n                        continue;\n                    }\n\n                    const newNodeClone = node.cloneNode(true);\n                    oldNodes[index].parentNode.replaceChild(\n                        newNodeClone,\n                        oldNodes[index]\n                    );\n                    console.log('replacing leaf UI node', newNodeClone, oldNodes[index]);\n                    initComponent(newNodeClone);\n                }\n                continue;\n            }\n\n            // If element is not the same type, replace it with new element\n            if (getNodeType(node) !== getNodeType(oldNodes[index])) {\n                const newNodeClone = node.cloneNode(true);\n                oldNodes[index].parentNode.replaceChild(\n                    newNodeClone,\n                    oldNodes[index]\n                );\n                console.log('replacing node', newNodeClone, oldNodes[index]);\n                initComponent(newNodeClone);\n                return;\n            }\n\n            // If content is different, update it\n            const templateContent = getNodeContent(node);\n            if (\n                templateContent &&\n                templateContent !== getNodeContent(oldNodes[index])\n            ) {\n                console.log('updating textContent', templateContent, oldNodes[index]);\n                oldNodes[index].textContent = templateContent;\n            }\n\n            if (\n                oldNodes[index].children.length > 0 &&\n                node.children.length < 1\n            ) {\n                console.log('clearing innerHTMl', node, oldNodes[index]);\n                oldNodes[index].innerHTML = '';\n                continue;\n            }\n\n            if (\n                oldNodes[index].children.length < 1 &&\n                node.children.length > 0\n            ) {\n                const fragment = document.createDocumentFragment();\n                console.log('fragmenting', node, fragment);\n                Dom.diff(node, fragment as any);\n                oldNodes[index].appendChild(fragment);\n                continue;\n            }\n\n            if (node.children.length > 0) {\n                console.log('diffing children', node, oldNodes[index]);\n                Dom.diffElements(node, oldNodes[index]);\n            }\n        }\n    }\n\n    static getBody(html: string, removeScripts: boolean = false): HTMLElement {\n        const parser = new DOMParser();\n        const dom = parser.parseFromString(html, 'text/html');\n\n        if (removeScripts === true) {\n            const scripts = dom.body.getElementsByTagName('script');\n\n            for (let i = 0; i < scripts.length; i++) {\n                scripts[i].remove();\n            }\n        }\n\n        return dom.body;\n    }\n\n    static flattenDomIntoArray(node: HTMLElement): HTMLCollection {\n        return node.getElementsByTagName('*');\n    }\n\n    static compareNodesAndReturnChanges(\n        newNode: HTMLElement,\n        oldNode: HTMLElement\n    ): Record<string, Element | null>[] {\n        const newNodes = Dom.flattenDomIntoArray(newNode);\n        const oldNodes = Dom.flattenDomIntoArray(oldNode);\n        const changes = [];\n\n        for (let i = 0; i < newNodes.length; i++) {\n            if (newNodes[i] !== oldNodes[i]) {\n                if (newNodes[i].tagName !== oldNodes[i].tagName) {\n                    changes.push({\n                        oldNode: null,\n                        newNode: newNodes[i]\n                    });\n                } else {\n                    changes.push({\n                        oldNode: oldNodes[i],\n                        newNode: newNodes[i]\n                    });\n                }\n            }\n        }\n\n        return changes;\n    }\n}\n","import { error } from '../utils/error';\nimport Connection from './../server/connection';\nimport Dom from './dom';\n\nexport const compute = (\n    expression: string,\n    el?: HTMLElement,\n    refs: Record<string, HTMLElement> = {}\n): ((event?: Event) => any) => {\n    const specialPropertiesNames = ['$el', '$emit', '$event', '$refs', '$dom'];\n\n    // This \"revives\" a function from a string, only using the new Function syntax once during compilation.\n    // This is because raw function is ~50,000x faster than new Function\n    const computeFunction = new Function(\n        `return (${specialPropertiesNames.join(',')}) => {\n            const method = ${JSON.stringify(expression)}.split('(')[0];\n            const methodArgs = ${JSON.stringify(expression)}.substring(${JSON.stringify(expression)}.indexOf('(') + 1, ${JSON.stringify(expression)}.lastIndexOf(')'));\n\n            if (!window._leafUIConfig.methods.includes(method)) {\n                return error(new ReferenceError(method + ' is not defined'), method, $el);\n            }\n\n            (${\n                Connection.connect\n            })('callMethod', { method, methodArgs, config: window._leafUIConfig }, $dom);\n        }`\n    )();\n\n    const emit = (\n        name: string,\n        options?: CustomEventInit,\n        dispatchGlobal = true\n    ) => {\n        const event = new CustomEvent(name, options);\n        const target = dispatchGlobal ? window : el || window;\n\n        target.dispatchEvent(event);\n    };\n\n    return (event?: Event) => {\n        try {\n            return computeFunction(el, emit, event, refs, Dom);\n        } catch (err) {\n            error(err as string, expression, el);\n        }\n    };\n};\n","import { DirectiveProps, Directives } from './../@types/core';\n// import { bindDirective } from './directives/bind';\n// import { modelDirective } from './directives/model';\nimport { onDirective } from './directives/on';\n\nexport const directives: Directives = {\n    // BIND: bindDirective,\n    // MODEL: modelDirective,\n    ON: onDirective,\n};\n\nexport const renderDirective = (\n    props: DirectiveProps,\n    directives: Directives\n): void => {\n    directives[props.parts[0].toUpperCase()](props);\n};\n","import { DirectiveProps, KeyedEvent } from './../../@types/core';\n\nexport const onDirective = ({ el, parts, data }: DirectiveProps): void => {\n    const options: Record<string, boolean> = {};\n    const globalScopeEventProps = ['outside', 'global'];\n    const eventProps = parts.slice(2);\n    const EVENT_REGISTERED_FLAG = `__on_${parts[1]}_registered`;\n\n    // @ts-expect-error: We're adding a custom property to the element\n    if (el[EVENT_REGISTERED_FLAG]) return;\n\n    const target = globalScopeEventProps.some(prop =>\n        String(eventProps).includes(prop)\n    )\n        ? window\n        : el;\n\n    const handler = (event: Event) => {        \n        if (eventProps.length > 0) {\n            if (\n                event instanceof KeyboardEvent &&\n                /\\d/gim.test(String(eventProps))\n            ) {\n                const whitelistedKeycodes: number[] = [];\n                eventProps.forEach(eventProp => {\n                    // @ts-expect-error: eventProp can be a string, but isNaN only accepts number\n                    if (!isNaN(eventProp)) {\n                        whitelistedKeycodes.push(Number(eventProp));\n                    }\n                });\n\n                if (!whitelistedKeycodes.includes(event.keyCode)) return;\n            }\n\n            // Parse event modifiers based on directive prop\n            if (eventProps.includes('prevent')) event.preventDefault();\n            if (eventProps.includes('stop')) event.stopPropagation();\n            if (eventProps.includes('self')) {\n                if (event.target !== el) return;\n            }\n            /* istanbul ignore next */\n            if (eventProps.includes('outside')) {\n                if (el.contains(event.target as Node)) return;\n                if (el.offsetWidth < 1 && el.offsetHeight < 1) return;\n            }\n\n            if (eventProps.includes('enter') || eventProps.includes('meta')) {\n                if ((event as KeyboardEvent).key === 'Enter') {\n                    data.compute(event);\n                }\n            }\n\n            if (\n                (eventProps.includes('ctrl') &&\n                    (event as KeyedEvent).ctrlKey) ||\n                (eventProps.includes('alt') && (event as KeyedEvent).altKey) ||\n                (eventProps.includes('shift') &&\n                    (event as KeyedEvent).shiftKey) ||\n                (eventProps.includes('left') &&\n                    'button' in event &&\n                    (event as MouseEvent).button === 0) ||\n                (eventProps.includes('middle') &&\n                    'button' in event &&\n                    (event as MouseEvent).button === 1) ||\n                (eventProps.includes('right') &&\n                    'button' in event &&\n                    (event as MouseEvent).button === 2)\n            ) {\n                data.compute(event);\n            }\n        } else {\n            data.compute(event);\n        }\n    };\n\n    options.once = eventProps.includes('once');\n    options.passive = eventProps.includes('passive');\n\n    target.addEventListener(parts[1], handler, options);\n\n    // @ts-expect-error: We're adding a custom property to the element\n    el[EVENT_REGISTERED_FLAG] = true;\n};\n","import { UINode } from './../@types/core';\nimport { compile } from '../engine/compile';\nimport render from '../engine/render';\nimport { directives } from './directives';\n\nexport default class Component {\n    public uiNodes: UINode[] = [];\n\n    constructor() {\n        this.uiNodes = [];\n    }\n\n    public mount(el: HTMLElement | string) {\n        const rootEl =\n            el instanceof HTMLElement\n                ? el\n                : document.querySelector<HTMLElement>(el) || document.body;\n\n        this.uiNodes = compile(rootEl);\n        this.render();\n        rootEl['component'] = this;\n\n        window.leafUI = {\n            rootEl,\n            component: this\n        };\n\n        return this;\n    }\n\n    /**\n     * Force renders the DOM based on props\n     * @param {string[]=} props - Array of root level properties in state\n     * @returns {undefined}\n     */\n    public render() {\n        render(this.uiNodes, directives);\n    }\n}\n\nexport const initComponent = (element: Element) =>\n    new Component().mount(element as HTMLElement);\n","import { DirectiveData, UINode, UINodeType } from '../@types/core';\nimport { compute } from './compute';\nimport { DIRECTIVE_SHORTHANDS } from '../utils/data';\n\nexport const flattenElementChildren = (\n    rootElement: HTMLElement,\n    ignoreRootElement = false\n): HTMLElement[] => {\n    const collection: HTMLElement[] = [];\n\n    if (!ignoreRootElement) {\n        collection.push(rootElement);\n    }\n\n    for (const childElement of rootElement.children as any) {\n        if (childElement instanceof HTMLElement) {\n            collection.push(\n                ...flattenElementChildren(\n                    childElement,\n                    childElement.attributes.length === 0\n                )\n            );\n        }\n    }\n\n    return collection;\n};\n\nexport const collectRefs = (\n    element: HTMLElement | Document = document\n): Record<string, HTMLElement> => {\n    const refDirective = 'ui-ref';\n    const refElements: NodeListOf<HTMLElement> = element.querySelectorAll(\n        `[${refDirective}]`\n    );\n    const refs: Record<string, HTMLElement> = {};\n\n    refElements.forEach(refElement => {\n        const name = refElement.getAttribute(refDirective);\n\n        if (name) {\n            refs[name] = refElement;\n        }\n    });\n\n    return refs;\n};\n\nexport const initDirectives = (\n    el: HTMLElement\n): Record<string, DirectiveData> => {\n    const directives: Record<string, DirectiveData> = {};\n    const refs = collectRefs();\n\n    // @ts-ignore\n    for (const { name, value } of el.attributes) {\n        const hasDirectivePrefix = name.startsWith('ui-');\n        const hasDirectiveShorthandPrefix = Object.keys(\n            DIRECTIVE_SHORTHANDS\n        ).some(shorthand => name.startsWith(shorthand));\n\n        if (!(hasDirectivePrefix || hasDirectiveShorthandPrefix)) {\n            continue;\n        }\n\n        const directiveData = {\n            compute: compute(value, el, refs),\n            value\n        };\n\n        // Handle normal and shorthand directives=\n        const directiveName = hasDirectivePrefix\n            ? name.slice('ui-'.length)\n            : // @ts-ignore\n              `${DIRECTIVE_SHORTHANDS[name[0]]}:${name.slice(1)}`;\n\n        directives[directiveName.toLowerCase()] = directiveData;\n    }\n\n    return directives;\n};\n\nexport const createASTNode = (el: HTMLElement): UINode | undefined => {\n    const directives = initDirectives(el);\n    const hasDirectives = Object.keys(directives).length > 0;\n    const node = { el, directives, type: UINodeType.STATIC };\n\n    return hasDirectives ? node : undefined;\n};\n\nexport const compile = (\n    el: HTMLElement,\n    ignoreRootElement = false\n): UINode[] => {\n    const uiNodes: UINode[] = [];\n    const elements = flattenElementChildren(el, ignoreRootElement);\n\n    elements.forEach(element => {\n        const newASTNode = createASTNode(element);\n\n        if (newASTNode) {\n            uiNodes.push(newASTNode);\n        }\n    });\n\n    return uiNodes;\n};\n","import lazy from './../utils/lazy';\nimport { renderDirective } from './../core/directives';\nimport { rawDirectiveSplitRE } from './../utils/data';\nimport { Directives, UINode, UINodeType } from './../@types/core';\n\nconst render = (\n    uiNodes: UINode[],\n    directives: Directives,\n): void => {\n    const legalDirectiveNames = Object.keys(directives);\n    const LAZY_MODE_TIMEOUT = 25;\n\n    lazy(LAZY_MODE_TIMEOUT, function*() {\n        for (const node of uiNodes) {\n            if (node.type === UINodeType.NULL) continue;\n            const isStatic = node.type === UINodeType.STATIC;\n            if (isStatic) node.type = UINodeType.NULL;\n            yield;\n\n            if (!isStatic) continue;\n\n            for (const [directiveName, directiveData] of Object.entries(\n                node.directives\n            )) {\n                const rawDirectiveName = directiveName.split(\n                    rawDirectiveSplitRE()\n                )[0];\n\n                if (\n                    !legalDirectiveNames.includes(\n                        rawDirectiveName.toUpperCase()\n                    )\n                )\n                    continue;\n                yield;\n\n                // If affected, then push to render queue\n                if (isStatic) {\n                    const directiveProps = {\n                        el: node.el,\n                        parts: directiveName.split(rawDirectiveSplitRE()),\n                        data: directiveData,\n                        node,\n                    };\n\n                    renderDirective(directiveProps, directives);\n\n                    // [TODO] Remove this after testing\n                    delete node.directives[directiveName];\n                }\n            }\n        }\n    })();\n};\n\nexport default render;\n","/**\n * @author Aiden Bai <hello@aidenybai.com>\n * @package lucia\n */\n// Lazy allows us to delay render calls if the main thread is blocked\n// This is kind of like time slicing in React but less advanced\n// It's a generator function that yields after a certain amount of time\n// This allows the browser to render other things while the generator is running\n// It's a bit like a setTimeout but it's more accurate\n\nexport const lazy = (\n  threshold: number,\n  generatorFunction: () => Generator<undefined, void, unknown>,\n): (() => void) => {\n  const generator = generatorFunction();\n  return function next() {\n    const start = performance.now();\n    let task = null;\n    do {\n      task = generator.next();\n    } while (performance.now() - start < threshold && !task.done);\n\n    if (task.done) return;\n    setTimeout(next);\n  };\n};\n\nexport default lazy;\n","import { init } from './core';\nimport { monkeyPatchDomSetAttributeToAllowAtSymbols } from './utils/reset';\nexport * from './@types';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    monkeyPatchDomSetAttributeToAllowAtSymbols();\n    init();\n\n    document.querySelectorAll('[ui-lazy]').forEach(el => {\n        el.removeAttribute('ui-lazy');\n    });\n});\n","/**\n * @author Caleb Porzio\n * @package livewire/livewire\n */\nexport function monkeyPatchDomSetAttributeToAllowAtSymbols() {\n    // Because morphdom may add attributes to elements containing \"@\" symbols\n    // like in the case of an Alpine `@click` directive, we have to patch\n    // the standard Element.setAttribute method to allow this to work.\n    let original = Element.prototype.setAttribute;\n\n    let hostDiv = document.createElement('div');\n\n    Element.prototype.setAttribute = function newSetAttribute(name, value) {\n        if (!name.includes('@')) {\n            return original.call(this, name, value);\n        }\n\n        hostDiv.innerHTML = `<span ${name}=\"${value}\"></span>`;\n\n        let attr = (hostDiv.firstElementChild)!.getAttributeNode(name)!;\n\n        (hostDiv.firstElementChild)!.removeAttributeNode(attr);\n\n        this.setAttributeNode(attr);\n    };\n}\n","import Component from './component';\n\n/**\n * Initialize Your Leaf UI root component\n * @param {HTMLElement|Document} element - Root element to find uninitialized components\n */\nexport const init = (element: HTMLElement | Document = document): void => {\n    const leafUI = new Component();\n    const rootElement = element instanceof Document ? element.body : element;\n\n    leafUI.mount(rootElement);\n};\n"],"names":["UINodeType","DIRECTIVE_SHORTHANDS","error","err","expression","el","message","console","warn","Connection","connect","type","uiData","dom","fetch","window","location","href","JSON","stringify","payload","params","method","methodArgs","component","config","data","credentials","headers","Content-Type","Accept","X-Leaf-UI","this","Referer","then","response","ok","_context","text","parse","_leafUIConfig","state","diff","html","document","body","res","arraysMatch","a","b","Array","isArray","length","every","val","index","leafUI","Dom","newNode","oldNode","diffElements","getBody","newNodes","prototype","slice","call","children","oldNodes","getNodeType","node","nodeType","tagName","toLowerCase","getNodeContent","textContent","count","parentNode","removeChild","log","newNodeClone","cloneNode","appendChild","initComponent","v","HTMLScriptElement","src","innerHTML","replaceChild","Object","keys","_oldNodes$index","attributes","values","_oldNodes$index2","_oldNodes$index3","hasDirectivePrefix","map","attr","name","startsWith","includes","hasDirectiveShorthandPrefix","some","shorthand","j","getAttribute","value","templateContent","fragment","createDocumentFragment","removeScripts","DOMParser","parseFromString","scripts","getElementsByTagName","i","remove","flattenDomIntoArray","compareNodesAndReturnChanges","changes","push","compute","refs","computeFunction","Function","join","emit","options","dispatchGlobal","event","CustomEvent","dispatchEvent","directives","ON","parts","eventProps","EVENT_REGISTERED_FLAG","target","prop","String","once","passive","addEventListener","KeyboardEvent","test","whitelistedKeycodes","forEach","eventProp","isNaN","Number","keyCode","preventDefault","stopPropagation","contains","offsetWidth","offsetHeight","key","ctrlKey","altKey","shiftKey","button","renderDirective","props","toUpperCase","Component","uiNodes","_proto","mount","rootEl","HTMLElement","querySelector","ignoreRootElement","flattenElementChildren","rootElement","collection","childElement","element","newASTNode","refElements","querySelectorAll","refElement","collectRefs","directiveData","directiveName","initDirectives","STATIC","undefined","createASTNode","compile","render","generator","legalDirectiveNames","_iterator","NULL","isStatic","_i","entries","_Object$entries$_i","rawDirectiveName","split","directiveProps","generatorFunction","next","start","performance","now","task","done","setTimeout","original","hostDiv","Element","setAttribute","createElement","firstElementChild","getAttributeNode","removeAttributeNode","setAttributeNode","Document","init","removeAttribute"],"mappings":"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"}